Computer Science 101: A Complete Guide to Your New Career Path 
a man's hands type on a laptop, behind an overlay of code and streams of data 
Master of Science in Computer Science 
Master of Computer Science 
Computer science is an incredibly rich and potentially lucrative career path. This field 
encompasses the creation, implementation, and management of the hardware and 
software applications needed to make modern technology work. 
 
If you’re interested in software development, web development, networking, cybersecurity, 
or any other type of computer science career, it’s time to take a closer look at a master’s 
degree in computer science. By earning a computer science degree, you could help chart 
or change the course of digital transformation, putting you at the forefront of technological 
advancement. 
 
Read on to learn more about what computer science is, which disciplines fall under its 
purview, what skills you will acquire by earning a degree in this field, and the types of jobs 
you can pursue once you have your degree. 
 
The Foundation: What Is Computer Science? 
Computer science, according to Encyclopedia Britannica, is “the study of computers and 
computing, including their theoretical and algorithmic foundations, hardware and 
software, and their uses for processing information.” 
 
Moreover, “[c]omputer science is considered as part of a family of five separate yet 
interrelated disciplines: computer engineering, computer science, information systems, 
information technology, and software engineering.” 
 
Luminaries throughout the last two centuries helped pave the way for modern computers. 
The mathematician and inventor Charles Babbage first proposed computers in the 1800s, 
although Alan Turing offered the first proof that binary computing was viable. 
 
American mathematician John von Neumann devised the stored-program computer, which 
can maintain instruction sets in its memory to repeatedly perform the same sequence of 
variable-dependent events. 
 
Today, big data and small startups alike use these foundational principles to design new 
devices, release software updates, and define the future of tech jobs. The good news? If 
you’re looking to start—or restart—your career today, you have a lot of options. 
 
The Breadth of Computer Science Disciplines 
While the phrase “computer science” likely makes you think of a desktop computer sitting 
on a table, keyboard, and mouse nearby, there is so much more to computer science than 
that. Here are just a few of the top occupations within the field. 
 
Software Development 
Software development is all about creating new programs and applications to help people 
achieve their goals. From editing a photo to tracking a job to monitoring heart health, the 
software programs that perform these tasks all rely on computer science concepts. 
 
People who work in this field not only design programs, they also engage in tasks such as 
software debugging, code optimization, and user experience (UX) design: ensuring that a 
program, application, or website is accessible to its audience. 
 
Web Development 
Browse the vast expanse of the internet, and what you're navigating is the tangible product 
of web development. It's the craft of building and maintaining websites, making sure every 
click, every image, and every interaction feel seamless. Whether you're a fan of aesthetics 
and diving deep into creating visually appealing web pages, or you're more inclined to 
ensure the back-end functionality hums perfectly, web development has a niche for you. 
 
Web developers juggle coding languages, work with databases, and sometimes also 
dabble in graphic design. From constructing the very framework of online businesses to 
personal blogs and massive e-commerce platforms, they play a pivotal role in how we 
experience the digital world. If you have a penchant for combining creativity with technical 
know-how, web development might just be your calling. 
 
Artificial Intelligence and Machine Learning 
Love the idea of working with neural networks and logical reasoning? Feel strongly that 
ethical and conscientious computer science professionals should be there to help shape 
and guide the AI revolution?  In that case, you might be a good fit for a career in AI and 
machine learning, fields geared toward developing new intelligence that can help us 
manage healthcare, educate the population, improve our food systems, expand our 
climate modeling options, and more. 
 
Cybersecurity 
Digital security is a big deal. Without proper protocols, hackers can do much worse than 
steal credit card information. They can bring down the grid, steal from the government, 
hold medical facilities hostage, or abscond with priceless proprietary information. 
 
Cybersecurity is the art of keeping intruders out. It’s an arms race, with cybercriminals 
continuously developing new ways to hack into systems, and everyone else working to 
prevent it. If you’re interested in career paths such as ethical hacking—trying to break into 
secure databases and breach firewalls to show where weakness lies—then this might be 
the field for you. 
 
Human-Computer Interaction 
According to the Interaction Design Foundation, “[h]uman-computer interaction (HCI) is a 
multidisciplinary field of study focusing on the design of computer technology and, in 
particular, the interaction between humans (the users) and computers.” 
 
This is the arena in which engineering, the human brain, and computers collide. It tracks 
how people interact with personal devices: what works, what doesn’t, how to increase 
efficiency, and more. It’s a fascinating combination to which many with computer science 
degrees are ultimately drawn. 
 
Networking and Systems 
The modern age of cloud computing makes it significantly easier to store and retrieve data, 
but someone still has to manage all of it. Networking and systems is the study of how 
devices link to one another, where information is stored, and how we can communicate in 
a fast-paced world. 
 
People who work in this field focus on making information exchange more efficient, driving 
developments in wireless technology, and more. 
 
Skills Acquired in Computer Science 
On your way to computer science expertise, you will learn several skills that are useful in 
the field, or any field. These include: 
 
Analytical Thinking 
Analyzing what’s in front of you is a critical skill for any computer scientist. Binary is not our 
native language, and computer architecture can work in seemingly mysterious ways. 
Analyzing what you see and getting to the deeper truth is essential. 
 
Problem-Solving Abilities 
The ability to solve problems on the fly is critical in time-sensitive fields like computer 
science. If a system goes down and your team is responsible for bringing it back online, you 
need the ability to work on a problem and come up with correct, often novel solutions, all 
without buckling under the pressure. 
 
Programming and Coding Proficiency 
If computer science has a “bread and butter,” it's programming and coding. Whichever way 
your career path takes you, you need these skills on board. 
 
Teamwork and Communication 
Soft skills such as teamwork and communication are just as important in this field as any 
other. Delegation, leadership, and listening all make working with computers much more 
efficient and effective. 

---
A few years ago, I was seeking a new job at top-tier tech companies, and I had stumbled 
upon LeetCode as a resource, and honestly I have to say that LeetCode is BY FAR the most 
effective tool that I've used to improve at interview-style algorithms problems. This is a 
short guide drawing upon my own experiences on how to maximize the value you get out of 
using LeetCode. 
 
The goal of this article is not to teach you how to scramble your way into a top tech 
company, but to help you learn how to acquire algorithmic problem solving skills, which in 
turn will help you get the jobs you want. We'll start with some general tips that apply pretty 
much to anything that you want to get better at: 
 
Consistency is key. You want to start as much in advance as you can, and do it daily. Doing 
it for one hour a day is better than doing it for seven hours on Sunday only. 
Focus on active improvement. This means that if you're on auto-pilot or if you're not 
focusing, then it's OK to just stop and come back later. 
Remember that everybody is different and there is no one-size-fits-all. So feel free to 
deviate from this (or any) guide. 
For generalist SWE roles, you should focus on the Algorithms type of problems. Years ago, 
these were the only problems, but since then, Database, Shell, and Concurrency have 
been added. So you should view only Algorithms problems in the problem set: 
 
https://leetcode.com/problemset/algorithms/ 
 
This is going to be your "home base", so let's customize it. 
 
You can click the "Difficulty" header twice to sort it from easiest to hardest. Interesting 
enough, this also sorts them within each Easy/Medium/Hard category in reverse order by 
acceptance rate. 
Click the empty header in the first column to sort with the unsolved problems on top. 
Finally, you can optionally filter out the questions that are locked for non-premium users. 
One way is to run this script in your web browser console; you'd need to do it every time you 
refresh the page, though. Of course, it's a little sketchy to run Javascript you find online in 
your browser console, but it's pretty simple if you want to understand what it does. 
Alternatively, you can use a browser extension, such as Leetcode Enhancer for Chrome. 
(It's open source, too!) 
Now you're ready to go. Obviously the best thing you can do it just solve every single 
problem on LeetCode. If you do that, you're really good to go. But, unfortunately, nobody 
has unlimited time on their hands, so we're going to have to optimize a little. 
 
Start from easiest to hardest. You can start skipping questions if you feel like the problems 
are getting too easy for you. 
Start with problems that have an editorial already written. These are the ones with a little 
"document page" icon in the "Solution" column of the problem set. As an exercise to the 
reader, you could re-purpose the script above to filter only for problems that have a per-
written editorial. 
Start with problems that have good reviews. While LeetCode is a pretty great platform, not 
all problems are created equal. If you open a problem, you can see how many people 
upvoted or downvoted a problem. I'd initially stay away from problems that have a worse 
than 2:1 ratio of upvotes to downvotes, and problems that have 4:1 or above are usually of 
fairly high quality. It's much easier to learn from the higher-rated problems. 
Eventually, you're going to find a problem that's too hard, and you'll get stuck. That's totally 
fine. In fact, it's absolutely fine (and perhaps even efficient) to give up on some problems. 
It's possible that it requires an algorithm or data structure that you haven't seen before, and 
there's no need for you to pull your hair out trying to re-discover an algorithm or data 
structure. Here are some tips for how to get un-stuck. 
 
First, if there is an editorial already written for the problem, start with that. These tend to be 
fairly high-quality and often include a well-written code solution. 
Next, open the "Discuss" tab for the problem, and read some of the posts. These vary wildly 
in quality: some people just post a solution; others go into great detail. Your mileage may 
vary here, but this is also often a helpful resource if you get stuck. 
Finally, you can Google the problem itself, and oftentimes other people will have posted 
solutions or written about it on third-party sites, like their personal blog or Github repo. 
Once you've gotten into the groove, and you feel mostly confident solving the problems on 
LeetCode, it's time to refine your skills. 
 
If you feel weaker in a certain algorithm, you can filter the problem set by "Tag". This is NOT 
recommended for general practice, since much of the actual problem-solving skill you 
want to have is the ability to identify the type of algorithm to solve a problem. So, if you 
have filtered by "Binary Search", you know the solution to the problem is probably going to 
be binary search. 
Go through some older problems, and make sure that you have found the optimal solution. 
Oftentimes, the LeetCode online judge will actually accept suboptimal solutions. If an O(N) 
solution exists, but you submitted an O(N log N) solution, most likely it's going to still pass. 
The percentiles for runtime/memory are actually a bit misleading so don't worry too much 
about that. The only time that it kind of helps if there are two very different runtimes, like 
O(N) vs O(N^2), and the runtime distribution will look bimodal. 
The weekly contests are a great way to see where you stack up against the rest of the 
community. Plus, they apply some time pressure, and usually give new problems that you 
haven't seen before. 
This is new and not available several years ago, but the new Mock Interview is actually 
really good for adding some time pressure. Unfortunately, there is no way to filter out 
previously solved problems, so you might get repeats of ones you've done before--but you 
can view this as an opportunity to revisit some of the older problems. Apparently, this can 
also help you identify areas of weakness. 
I've never used it, but hearing from others, I'd consider it to almost be "cheating" but 
LeetCode premium is actually pretty good if you're really in a crunch and want to see what 
questions companies tend to ask. I do not recommend studying for a specific company, 
since your goal should be to build up algorithmic problem solving skills, rather than 
memorizing the answers to a few known problems. However, if you are really in a time 
crunch, then this could be your best bet. (I'm recommending paying for LeetCode 
premium, and I'm not even sponsored by LeetCode, believe it or not! That's how good it is.) 
 
Finally, if you've got some money to spare, or have a nice friend or library who can lend you 
the book, I also strongly recommend "Cracking the Coding Interview". Many of those 
problems are also available on LeetCode (see this list), so you can actually use LeetCode 
as a complementary tool alongside the book. I would consider the book to be fairly entry-
level, so if you're new to technical interviews, I'd recommend starting by going through the 
book, even before doing LeetCode full-time. 
 
Please feel free to leave comments if you have any questions, and I will be happy to answer 
them or update this post. 

---
Have you received a tech job offer and want to know if you can negotiate? 
 
This post is specifically designed for candidates who are about to receive or have already 
received a tech job offer. 
 
It aims to help you increase your total compensation and salary by providing expert 
negotiation strategies. 
 
 
Increase your chances of receiving a great job offer with Exponent's salary and negotiation 
course. Learn how to navigate the negotiation process through scenarios and role-plays 
and utilize our exact phrases and frameworks to secure the best compensation 
package.Sneak Peek:- Simulation: Negotiating an Offer (Big Tech)- Simulation: Exploding 
Offers- Lesson: Questions to Ask Your Hiring Manager 
Who Wrote This Guide? 
We wrote this salary and compensation negotiation guide with help from 5 recruiters, hiring 
managers, and salary negotiation coaches at FAANG+ and startup companies like 
Microsoft, Amazon, Meta, Lyft, and Doordash. 
 
 
Watch our mock salary negotiation with Zaheer, the co-founder of Levels.fyi 
 
Should You Negotiate? 
Thinking of negotiating your offer? You probably have concerns like: 
 
Fear of losing the offer if you negotiate 
Worry that the company may view you negatively for negotiating 
Concern that the company may move on to other candidates if you negotiate 
The belief that you don't have much leverage to negotiate 
Negotiating isn't for everyone, but in most cases, you can push for a larger compensation 
package during the hiring phase. 
 
 
According to CIO, "66% of American workers fail to negotiate pay, but 100% of employers 
lowball on the first offer." 
Plus, companies will never rescind your offer for simply negotiating. It doesn't hurt to 
research how competitive your offer is in the first place. 
 
Negotiating your compensation may seem scary, but ensuring you receive fair pay for your 
role is vital. 
 
Remember, negotiating is expected, so don't be afraid to speak up. 
 
A screenshot of levels.fyi's compensation data for Facebook Data Scientists Level 5. 
Sites like levels.fyi can help you benchmark your offer based on historical compensation 
data. 
Benchmarking Your Offer 
Do you know how much your skills are worth on the job market? Candidates often make the 
mistake of not researching enough during the negotiation process. 
 
Ultimately, leverage is what matters most in determining a compensation package. 
 
If you didn’t take this job offer, what other options do you have? How do they compare to 
this offer? 
 
To determine your market compensation rate, start by researching other similar positions 
and candidates with platforms like: 
 
Pave, 
Glassdoor, 
or Salary.com. 
 
Sites like Salary.com let candidates and hiring managers research fair market 
compensation rates. 
Like candidates, companies also use these platforms to gauge compensation ranges when 
hiring. 
 
In California and New York, companies must publish compensation bands with job 
postings, making market compensation rates publicly available. 
 
Can’t find salary information in the job listing? Ask your recruiter for the info.  
Use these data points to try and benchmark your offer: 
 
Level: Ask about the target level of this role with your hiring manager or recruiter. Inquire 
about the internal leveling system used by the company and what each level means. For 
instance, at what level do people managers start? Consider targeting a level higher than 
your current one. 
Role Title: Some tech roles have unclear titles, such as "product engineer" or "technical 
program manager." Ask questions to understand the role and find comparable rates. 
Industry: Understanding the industry landscape is useful. For example, a software engineer 
in finance (e.g., at a bank) typically earns less compensation than a software engineer in 
"Big Tech." However, negotiating beyond these industry norms is still possible. Knowing the 
market rate for a specific industry is helpful. 
Geography: Certain cities, such as New York, may pay more than other regions due to the 
higher cost of living. Consider the company's policy on remote work and geographic pay. 
Create a salary range based on research on what comparable positions generally pay. 
 
Make a spreadsheet or document listing all the compensation bands you’ve found. You can 
use our salary negotiation template at the bottom of this post. 
Once you’ve collected all this data, you’ll have a better sense of market compensation 
rates for the role you’re aiming for and the specific opportunity you may be interviewing for. 
 
Aim High 
Create a "thrill number" based on your financial situation and compensation research. This 
number is your ideal salary. 
 
It is the highest salary you would accept and can be used for counteroffering. 
 
Make sure it is realistic but higher than current market rates. 
 
Consider an offer 30% higher than the market rate you researched. 
 
Getting More Job Offers 
Negotiating based on your market compensation can give you leverage, but having 
alternative offers is even more effective. 
 
Market compensation can be a vague concept, with some companies claiming their rates 
differ from those based on your research or offering nuanced details like benefits or equity 
that make their offer stand out as competitive. 
 
However, with an alternative offer, companies can't easily argue that their compensation 
package is competitive if it's lower. 
 
 
Specialized job boards, such as APM List, can make your job search easier by tracking 
active product manager openings at big tech companies. 
Searching for Jobs 
So, how can you ensure you have alternative offers? By planning your job search ahead of 
time. 
 
Waiting for recruiters to reach out to you with opportunities minimizes your chances of 
having alternative offers and losing leverage in the negotiation. 
 
Think of your job search as a process, like evaluating multiple options for buying a home or 
a new car. 
 
Apply to many jobs all at once. That way, your interviews, and offers will arrive within the 
same rough time window. 
Here are some tips to ensure a comprehensive job search process: 
 
Create a list of 25-50 companies you're interested in applying to 
Conduct initial research on each company to determine which ones to proceed with (keep 
the number realistic). 
Apply to all target companies in the same week. 
Schedule interviews and recruiter conversations to align with the timelines of all your 
opportunities. It's reasonable to adjust the schedule of interviews and recruiter 
conversations. 
If you receive an offer, inform your recruiter that you need time to evaluate it. Asking for 1-2 
extra weeks is reasonable, and waiting can often increase your leverage in a negotiation. 
Mentioning that you have another offer can encourage the recruiter to increase your offer. 
 
Evaluate multiple options and compare the economics of each. 
 
 
Compare multiple compensation offers using Exponent's comparison spreadsheet 
template. 
Evaluating an Offer 
Congrats on reaching the recruiter offer stage! 
 
This call is typically the final stage of the offer process, where the recruiter confirms they 
are preparing the offer and asks about your salary and compensation expectations. 
 
Avoid sharing your salary expectations during this call. 
 
Instead, focus on evaluating the offer. Sharing your expectations at this stage can set a 
lower negotiation baseline and potentially result in a lower offer. 
 
Make the company propose the first number and then negotiate. 
 
During the call, say things like: 
 
I'm very excited about this offer. Thanks so much! 
Do you have any feedback about what made me stand out as a candidate? 
Do you have any more information you could share about the role or the offer? 
Can you send me a written copy of the offer? 
I'd like to spend some time looking through the offer before I reply. 
Tell the recruiter you need to take some time and will get back to them after the call. 
 
A screenshot of Pave, the salary and compensation benchmarking tool, showing a sample 
dataset of compensation for a software engineer. 
Sites like Pave let you benchmark your salary, equity, and benefits against similar positions. 
Key Offer Details 
An offer may consist of the following: 
 
Start Date: Is it flexible? Determined? Is there a range? 
Base Salary 
Equity: Is it vested? When is the cliff? What is the vesting schedule? What are the windows 
to exercise your stock options? 
Benefits: What benefits are included (e.g., maternity/paternity leave, fitness membership, 
meal plans)? 
Stipends: Are any work-from-home stipends included, for instance? 
Bonuses: Are there any signing bonuses? Relocation bonuses? 
Performance bonuses: What are the expected targets for performance bonuses? How are 
those determined? 
Salary increase expectations: When are salaries evaluated? How are they adjusted to 
match market compensation and factors like inflation? When and how are raises evaluated 
and awarded? 
Healthcare: What are the health insurance options available? How much do employers 
match? 
PTO: What is the paid time off policy at the company? 
Offer expiration date: Is an offer expiration date included? Is there an expectation of when 
they'd like to know if you're signing? 
Title: What is the title of the role? 
Leveling: What is the level of the role? What does this level mean at the company? 
Commission Plan: Especially for sales roles, what is the target quota, average contract 
value, and expectation around how many deals to close per quarter? When are 
commissions paid out (e.g., quarterly)? 
There may be even more details relevant to your role, so list any relevant component to the 
offer. 
 
Negotiable Terms 
After identifying critical elements of your offer, you have a list of negotiable terms. 
 
Review which terms are most and least important to you. This will help in your negotiation 
to know where you can budge and where you need to stand firm. 
 
Preferences 
If you're mainly concerned about saving for your child's college fund, you can prioritize 
cash over equity. 
 
Let your recruiter know you want a higher cash component and are willing to compromise 
on equity. 
 
Look for opportunities for mutual benefit, such as agreeing on a start date that works for 
you and the company. 
 
Consider asking for higher cash compensation as a compromise if there are differences. 
 
When working with your recruiter, focus on gathering all the relevant information about the 
offer before sharing your preferences. 
 
If asked for your initial reaction, simply express your excitement and request more time to 
review the offer. 
 
Your priority should be to fully understand the compensation package. 
 
Negotiating an Offer 
When negotiating, schedule another call with the hiring manager to discuss the role. 
 
If the recruiter doesn't offer it, ask for it yourself. 
 
During the call, your goals are to convince the hiring manager of your fit, better understand 
the offer and company, ask questions to help negotiate the offer and determine your 
interest in the company. 
 
Approach each goal separately during the call. 
 
Convincing the Hiring Manager 
To increase your chances of negotiating a higher offer, show enthusiasm to your hiring 
manager by asking questions about the role. Here are some questions to ask: 
 
What led to creating this job posting? 
What are the key performance indicators (KPIs) for this role? 
What does excelling in this role look like? 
How might this role and other adjacent roles evolve over time? 
Instead of talking about yourself, focus on understanding the role and the hiring manager's 
pain points that this role aims to address. 
 
Understanding the Offer and Company 
Spend time clarifying questions about the offer or the company by speaking with your hiring 
manager. 
 
Here are some specific questions that you could ask: 
 
What are the team's general key performance indicators? 
What is the company's growth trajectory, and how are goals being achieved? 
How are team goals and targets set? 
How are disagreements in decision-making handled? 
Questions to Ask Your Hiring Manager 
If it helps, you can ask your hiring manager about negotiation-specific topics. 
 
Is it acceptable to negotiate for this role? 
Can you provide more information on how compensation was determined for this role? 
Can you tell me more about how the performance bonus will be determined? Will you be 
given early signals to predict whether or not you'll exceed expectations? 
How did you rank relative to others in terms of your interview performance? 
Comparing Multiple Offers (Template) 
Although offers are not just about pay, it's still important to understand the financial aspect 
of each one. 
 
Create a spreadsheet to compare them side-by-side. 
 
Consider including your current offer for comparison. Here's an example table to evaluate 
your options. 
 
 
Use Exponent’s salary comparison template spreadsheet to evaluate multiple offers and 
understand which one is worth the most. 
Consider the following: 
 
Stock options and RSUs are risky. RSUs function like stocks that can rise or fall depending 
on the market. If you were given 100 RSUs of Google and the share price dropped by $10, 
you would earn $10 * 100 less. Stock options are even more speculative. 
A lower compensation offer may be worth it for the company culture and opportunity. 
Consider all aspects of the opportunity, not just the numbers. 
Negotiating Startup Compensation and Equity 
Unlike big tech companies with predefined salary ranges, startup offers often involve 
custom compensation packages that may include a base salary and equity in stock options 
or phantom equity. 
 
Researching the Startup 
Before negotiating an offer, conduct extensive research on the company. Start by looking 
into the startup's funding rounds, potential for growth, and financial stability. 
 
Understanding concepts like series A, B, C, and D funding rounds is crucial to assessing 
your equity's value. 
 
By knowing the company's funding history, you can determine its ability to succeed and 
generate returns on your equity. 
 
To evaluate the financial stability of a startup, inquire about its 
 
runway, 
funding rounds, 
future funding plans, 
revenue, and user numbers. 
This information provides a comprehensive view of the company's financial position and 
likelihood of success. 
 
Key financial indicators include year-over-year revenue increase, cash reserves, and 
outstanding shares. While recruiters may not have all the answers, independent research 
and engaging with investor relations can provide valuable insights. 
 
Negotiating with Startups 
Effective negotiation with startups requires a strategic approach. Start by asking for 20% 
more than the base salary as a starting point for negotiations. 
 
This tactic allows room for a middle ground where both parties can reach a satisfactory 
agreement. 
 
Additionally, if you have competing offers, leverage them to your advantage. Startups may 
be more willing to negotiate equity than other forms of compensation. 
 
Assessing the Offer 
Consider whether the compensation package aligns with your goals and expectations. 
 
While base salary is essential, consider the potential for equity to provide significant 
returns in the future. Evaluate the startup's long-term benefits and growth potential to 
make an informed decision. 
 
Startups offer exciting opportunities for growth, and with the right approach, you can 
navigate job offers and secure a compensation package that suits your needs. 
 
Negotiation Advice from Levels.fyi 
This advice comes from Zaheer, the co-founder of Levels.fyi, in a mock negotiation 
simulation with Exponent. 
 
Knowing Your Worth 
Familiarize yourself with industry standards and research average salaries for your desired 
role. 
Utilize deflection and question-flipping strategies to steer the discussion away from salary 
expectations. 
Focus on showcasing your skills, accomplishments, and how you can benefit the company. 
Set a high anchor and don't undervalue yourself or settle for less than you deserve. 
The Power of Written Offers 
Request additional time to evaluate the offer thoroughly 
Ask for a written offer that includes comprehensive details such as equity and vesting 
schedules and additional benefits like 401k plans and commuter benefits. 
Use the written offer to gain a clear overview of the entire package and evaluate it 
objectively. 
Negotiating Your Total Comp 
Discuss the base salary and any additional forms of compensation, such as restricted 
stock units (RSUs). 
Cite market data to justify your request. 
Emphasize the importance of fair and competitive compensation to ensure loyalty and 
motivation. 
Express your expectations, and if you have competing offers, make it known to the hiring 
manager. 
Taking Negotiations Offline: The Email Advantage 
Take negotiations offline, preferably through email, for more time to consider and respond 
thoughtfully. 
Ask for additional time to discuss offers and think them through. 
In an email, write your thoughts and responses to articulate your points effectively and 
have a written conversation record. 

---
Guide: how to get a job 
New Grad 
Hey! I’ve been hiring engineers/devs for about 8 years now. In light of the depression 
caused by news of layoffs, I wanted to offer my view point from someone who is trying to 
hire at this time. 
 
Before you understand cs, you need to understand markets. Here is the state of the tech 
hiring market 
 
Elon proved that a platform can just fire engineers that traditional engineering school of 
thought considered irreplaceable. You have no idea how seismic of a shift this is. I’ve seen 
companies that are held hostage by a single engineer who refuses to let anyone else come 
too close to understanding the system. Owners genuinely believed that the systems 
wouldn’t run without him. Turns out they can fire him. 
 
This has shown an renewed interest in the industry to hire globally. Principal AI engineers in 
America cost more than NFL quarterbacks. These brand new startups can’t afford hiring AI 
engineers in America. For what is essentially a new grad salary in America they get an 
experienced AI engineer from India. I’m not saying that it’s a one to one replacement, but 
it’s so close that you wouldn’t really care. 
 
TCS. Big 4 tech employees that just got laid off? Where did those jobs go? TCS. 
 
Remote work. Covid proved to people that work can be done remotely. If it can be done 
remotely, why would they hire from HCOL areas/countries? Especially if it’s non client 
facing role. Ones being offered in USD will have applicants from all over the world. Just try 
posting a remote job in usd on LinkedIn and watch your job post budget run out. 
 
So what can you do? 
 
Get a security clearance and apply for industries that have a compliance to only hire from 
your country. That’s the only way you get considered for a remote job. 
 
Go meet people. If you can prove to an employer that you’re the one for them, they will 
happily not go through the stack of resumes that they likely paid for. 
 
Make good use of your college. No one I know got an entry level job in an old field. All of 
them got an entry level job for an emerging technology. Pay attention to them. 
 
Consider the market. You may really enjoy X , but no one is working on X or talking about it. 
Well in that case you need to figure how you’re going to get x to fit into Y which is what the 
market wants. Remember, upskilling is roulette for the future. Your new skills maybe in 
demand by the time they mature or not. That risk is borne by you. 

---
Computer Science Major? Here’s how to Find Your First Job 
Mike Coutermarsh 
Startup Grind 
Mike Coutermarsh 
 
· 
Follow 
 
Published in 
Startup Grind 
 
· 
3 min read 
· 
Nov 26, 2015 
51 
 
 
4 
 
 
 
If I were in college again, I’d be sure to intern somewhere every summer. And somewhere 
different each time. This will help you figure out what you like. 
 
Do you wake up in the morning excited about the work you’re doing that day? If so, keep 
doing that   . If not, try something else! This will change as you get older. 
 
Once you graduate, you’ll probably be looking at large co’s, mid-size tech companies or 
startups. 
 
Try to get into a mid-size tech company for your 1st job 
Startups = Avoid, you’ll have plenty of time later to join one if you want. But not as your 1st 
job. They are really hard, often lack structure, best practices, good management. Before 
joining one you’ll want to have some basis on “how to work”, which you’ll learn at larger 
companies. 
Large companies = Can be good. This is how I started. Development tends to move slower 
though and as a Jr. you’ll be doing a lot of small/maintenance/bug work. It’s a safe choice. 
But I don’t think it’s the best choice. 
Mid size companies = YES. This is what I’d do if I were graduating today. This is where you’re 
likely to learn the most. Similar culture/speed to a startup, but they have the things you 
need as a new developer. They should have good structure, practices, experienced 
managers. You’re more likely to do important and interesting work. You’ll have more access 
to senior or executive employees — the people you want to learn from. 
 
Work in positions where your job makes the company money 
With a CS degree, you’re lucky enough to be in a position where you know how to build 
things that add value. 
 
If you want to write software, work for a company that sells software. 
 
If you want to design jet engines, work for a company that sells jet engines. 
 
The closer you are to the $, the better your career will be. 
 
The result: more interesting work, money, and quicker career advancement. 
 
Finally, don’t worry so much 
Most of all, if you get it wrong and end up somewhere you don’t like. Don’t panic, just start 
looking again. I got lucky and it only took me 2 years out of college to figure out what I loved. 
You’ll make mistakes, but eventually you’ll learn what you love doing and find a place to do 
it. 
 

---
Receiving multiple job offers can be the icing on the cake of a long and arduous job search. 
Most job seekers in the tech field send applications to numerous companies in the process 
of finding a new position, never imagining that two companies might compete for them. 
When they do and you are choosing between two job offers, it can be stressful to know 
which will be the best fit, particularly if they have similar duties, benefits, and on-paper 
potential. So how can you best decide between two great positions? 
 
Before you dwell on the decision for too long, let’s consider how to weigh multiple offers.  
 
What to consider when you receive multiple offers 
Deciding between two offers can feel overwhelming, but evaluating your options using the 
same criteria is a great place to start. Here are eight areas to consider as you weigh your 
options. 
 
The company values. When choosing between two companies, consider the mission and 
values of both. What does the company stand for, who do they serve, and why? How do the 
mission and values of both companies align with your personal core values, which 
ultimately guide your behavior, actions, and decisions? How do the products or services of 
the companies differ and which product or service most closely matches your core values? 
Asking these questions will help you get clear about how you might impact the industry and 
the customers your company serves and will give you clarity about which will be right for 
you. 
 
As you weigh the fundamental differences between both companies, also consider the 
culture both for leadership and employees. Although a hiring manager thought you would 
be a good culture fit for a company doesn’t mean it is the best culture fit for you. Find out 
what others in your potential role, department, and leadership team are saying about the 
company culture to determine if it’s the type of place you want to devote 40 hours per week 
to. 
The salary and employment package. Although software engineer salaries offered at both 
positions will differ, it may not be the black-and-white decision maker it appears to be. 
Consider what benefits come along with your offers, including paid time off, sick leave, 
parental leave, retirement, stock options, and more. For instance, although a startup may 
not pay as well as a large and well-established company, they may be able to offer equity in 
the company itself which could be more valuable in the long run. When in doubt, consult 
online resources, a salary guide, or the career support team at Bloom Institute of 
Technology (formerly known as Lambda School) to see if your offers are fair, to industry 
standards, and reflective of your skills. 
The role. Review the job descriptions of both positions. Consider what your daily tasks will 
be in each role, and how much you will work independently, with clients, and with your 
future team. How will your role at each job play to your strengths? How much stress and 
responsibility will each role entail? How much independence and creative freedom will 
each role support? Imagine the frameworks and languages you will use in your role and 
how much training and learning the roles will encompass. Finally, picture yourself in each 
role and imagine yourself completing your responsibilities. Which feels more natural and 
exciting for you? 
The leadership. Look online for information about those in leadership roles within the 
company. Read reviews on sites like Glassdoor to help you understand how others have 
experienced the CEO, CFO, Head of HR, and other forward facing positions of power. 
Reflect on your interviews and the interactions you have had with future managers and 
others on the leadership team. Did you feel comfortable and respected? Were your ideas 
valued? How were questions received? Consider if those in leadership roles moved into 
their positions or if they were recruited. Find out how long employees and leadership 
typically stay at the company. Quick turnover and a lack of upward mobility may indicate 
larger management problems. Find out if those in leadership roles are happy and well 
compensated – after all, you could be in their shoes before you know it.    
The team. When starting a new position, consider who you will be spending the most time 
with. Most likely you will be working on a team, communicating regularly about shared 
projects and outcomes. Consider the size and composition of the team you may be on and 
how this might play to your strengths and weaknesses. For instance, if you will be on a large 
team and working on large projects, you will likely be in large meetings. How comfortable 
will you be getting the needs of your projects met in this type of environment?  
 
If you participated in any panel interviews with members of your future team, recall the 
interactions and how comfortable you felt with your potential future co-workers. These 
individuals could be your greatest supporters, mentors, and allies in your work and for your 
career trajectory. If you are unsure who you might be working with, don’t be afraid to do 
some social media cyber stalking on sites like LinkedIn. Identify who might be a resource 
for you on your future team, and how this will impact your work satisfaction.   
The location. Careers in tech often come with remote opportunities, however if you have 
the option between relocating or working remotely, you will have even more to contend 
with. If you will be working in an office, consider the location of each company and what 
the area or commute will be like for you. If you will need to relocate, is the company located 
near an area you would enjoy living in? Consider your quality of life in a new location and if 
moving would be worth any added compensation or opportunities. How far might you be 
from friends and family, and how easy would it be to foster community in a new place? If 
both positions start remotely, inquire about whether they will stay remote or if you will need 
to eventually move into an office setting.  
Upskilling potential. With any new job comes the potential for reinvention, growth, and 
advancement. Consider what training and skill development will be offered through your 
new position, and how the upskilling will benefit your mastery as an engineer. How will your 
growth benefit you in your position now and other positions in the future? Choosing the 
obvious or most comfortable position may not push you out of your comfort zone, so don’t 
let your fear govern your decision making. After all, you will never know what you are 
capable of if you aren’t willing to take a risk.   
Career path. Although you may be deciding between two different positions now, where 
you land will likely not be your only career move in the tech space. As you decide between 
two roles, think critically about how your position might lend itself to upward mobility in 
your company or next steps toward a future career path. How will the offers position you to 
maximize your potential? Consider all of the aforementioned considerations together and 
weigh them against how the two positions will influence your future goals and aspirations. 
Where will you receive the most mentorship and opportunities that will move you closer to 
the career you dream of?  
No matter what position you choose, allow your happiness to lead the way. Remember that 
a job is never a qualifier of your worth and is never promised, and even if you land 
somewhere that is ultimately not the right fit there will always be another option around the 
corner. 

---
What are behavioral interviews 
Succeeding in an engineering career involves more than just technical skills. People skills 
become more important as an engineer becomes more senior. Senior engineers should 
have the ability to lead and influence, resolve conflicts, anticipate risks, plan the roadmap, 
and more. 
 
Hiring a talented engineer that cannot work with others can ultimately be a net deficit for 
companies. Companies don't want to hire brilliant jerks. The company is better off not 
hiring a very talented engineer who refuses to work with others or causes an entire team to 
be unproductive. Companies want to hire the right person that will work well with the 
existing employees and help the team and company achieve greater heights, and 
behavioral interviews are one way of determining if someone will be good to work with from 
a non-technical standpoint. 
 
Typically, behavioral interview questions can be split into several types: 
 
Getting to know your career preferences, ambitions and plans 
Discuss details of experiences or projects written in your resume 
"Tell me about a time where you" type of questions where you describe how you 
demonstrated certain traits or responded to a situation 
The importance of behavioral interviews 
Companies value behavioral skills and do evaluate candidates on them. At the time of 
writing, Facebook has one round (out of four) dedicated to behavioral interviews. Airbnb 
has TWO rounds (out of six) dedicated to behavioral interviews/company fit. Lyft has one 
round (out of five) dedicated to past experience and situational questions by a hiring 
manager. 
 
From the company's perspective, the interview has two purposes: 
 
Assess whether a candidate has a history of demonstrating the right behaviors that would 
make them successful at the company. 
Assess the seniority of the candidate e.g. junior, senior, or staff. 
LeetCode for Front End 
Built by ex-FAANG Senior Engineers, GreatFrontEnd is the fastest way to prepare for a Front 
End interview. 
 
How to prepare for behavioral interviews 
Learn the STAR answer format 
Prepare your answers to commonly asked questions 
Prepare experiences to showcase fit to the company's culture / core values 
Try out mock behavioral interviews 
Use structured courses 
1. Learn the STAR answer format 
The STAR format is a framework to help you organize answers to behavioral questions - 
especially ones requiring you to discuss previous experiences 
 
Situation - The interviewer wants you to present a recent challenge and situation which you 
found yourself in 
Task - What were you required to achieve? The interviewer will be looking to see what you 
were trying to achieve from the situation. Some performance development methods use 
"Target" rather than "Task". Job interview candidates who describe a "Target" they set 
themselves instead of an externally imposed "Task" emphasize their own intrinsic 
motivation to perform and to develop their performance 
Action - What did you do? The interviewer will be looking for information on what you did, 
why you did it, and what the alternatives were 
Results - What was the outcome of your actions? What did you achieve through your 
actions and what did you learn? What steps did you take to improve after the experience? 
Example of how to apply STAR to a behavioral interview question 
Here's an example of how the STAR format can be used to answer the question: "Tell me 
about a time in which you had a conflict and needed to influence somebody else". 
 
Situation 
"I was the team lead of a school project about building a social network mobile web app. 
Our designer's midterms were approaching and didn't have time to produce the mockups. 
Our front-end person was rushing him for the mockups so that he could proceed with his 
work, and that was stressing the designer out. The atmosphere in the team was tense." 
 
Task 
"As the team lead, I had to resolve the tension between the front-end developer and the 
designer so that the team could work together peacefully and complete the project on 
time." 
 
Action 
"I spoke to the front-end developer to ask him why he was rushing the designer for the 
designs. He said that he wanted the designs early because it would be a waste of time 
rebuilding if the designer designed something different eventually. I explained to him that 
the midterm dates were out of the designer's control and we had to be more understanding 
about each other's schedules. I spoke to the designer to get a rough idea of what he had in 
mind and asked him when he could commit to producing the high-fidelity designs. He 
replied that he could start on them as soon as his midterms were over. I explained to him 
why the front-end developer was pushing him for the mockups, and that the front-end 
developer had no ill intentions and simply wanted the project to succeed. As someone with 
some experience in UI/UX design, I came up with wireframe mocks, ran them by the 
designer for approval, then passed them to the front-end developer to start building. I 
encouraged the front-end developer to use placeholders and not be too concerned about 
the details for now. We could build the non-UI parts first (authentication, hook up with 
APIs) and tweak pixels and add polish later on. The front-end developer agreed and went 
ahead with the approach. I explained to the front-end developer that the designer will pass 
us the mockups after his midterm, by <DATE>." 
 
Result 
"When our designer ended midterms, he came back with beautiful mockups that fit well 
into the wireframes. Our front-end developer implemented them with great care to detail. 
We ended up scoring top marks for the project and became a great team." 
 
2. Prepare your answers to commonly asked questions 
The next natural step is to start preparing your answers for commonly asked behavioral 
interview questions. You may refer to my list of 30 questions which were collated across 
top tech companies for this. 
 
While most people might be inclined towards memorization, it's much better to pen down 
bullet points to each question and practice verbalizing them near to the interviews, so that 
your answers will come out more naturally. 
 
3. Prepare experiences to showcase fit to the company's culture / core values 
As aforementioned, most top tech companies use their company values to evaluate 
candidates in behavioral interviews. As such, you should do your research to find out what 
those values are and ensure you have prepared experiences that showcase fit. 
 
4. Try out mock behavioral interviews 
If you would like to practice behavioral interviews with professional interviewers from top 
tech companies, schedule one with interviewing.io. Interviewing.io boasts a large pool of 
interviewers from Facebook, Amazon, Apple, Google and Microsoft. I have used 
interviewing.io both as an interviewer and interviewee and can guarantee a good 
experience with this platform. 
 
5. Use structured courses 
I don't really think one needs to attend a course on behavioral interviews, but your mileage 
may vary. I've seen candidates get rejected for failing the behavioral round even though 
they did super well on the coding and system design interviews. If you want to take a course 
on behavioral interviews, I'd recommend the following courses: 
 
"Behavioral Interviews" by Exponent - While Exponent also has courses on technical 
content, what really makes them stand out from the other interview preparation platform is 
their availability of content for non-software engineering roles such as Product 
Management and Product Marketing. Their behavioral interview course is a mix of videos 
(by the Exponent CEO himself!) and text, going through the most common questions and 
imparting you with techniques to help you ace the interview. To top it off, they also have an 
interview question bank for behavioral questions with responses from the platform's 
helpful community. While the subscription might be a little pricey for just the behavioral 
interviews content, they also offer quality technical content for System Design, Data 
Structures and Algorithms. The convenience of a one-stop platform which covers all 
aspects of technical interview preparation is very enticing. 
"Grokking the Behavioral Interview" on Educative - As per other courses on Educative, this 
course is text-based and they believe that text-based courses are the more efficient than 
video courses. One thing that stands out about this course is that they teach you patterns 
for behavioral interviews, not just about memorizing questions and preparing answers. 

---
Practical and Comprehensive Guide to Landing a CS Job or Switching Careers to CS 
First off, right off the bat, I must say I am not selling anything and I certainly don't want any 
contact info. I just wanted to share (see below google drive link of free resume/cover letter 
and interview tactics files) what I learned from one year of job searching and going through 
the daily, arduous ordeal that is crafting resumes and networking online. This is the exact 
process for how I landed a role, finally, with a job I like. 
 
This works for anyone wanting to get a promotion, change careers entirely, or are job 
searching in general for a CS role. 
 
Below is the resource-filled link and practical advise that is an accumulation of all my 
personal research and assistance from job coaches, and the resumes I edited for my 
colleagues (once I figured out how), complete with notes on how you can do it, too. (They 
all got jobs as a result, btw. One friend, I kid you not, had zero interviews in 6 months then 
had 3 in one week after these edits and methods. Could have been a fluke, but I'm just 
saying this method works. No promises of course, but its genuine). 
 
It details how I got recruiters attention with a jaw-dropping resume/cover letter, as well as 
interview tactics, cold outreach email templates, and modules that someone sent me that 
containt practical tips and tricks for how to get a role or even switch careers to CS: 
 
https://drive.google.com/drive/folders/1vZyeVUqJ69NmHD-w3-Jt15D4HmTOybM_ 
 
It's my goal to help ease the anxiety and stress of this process for all those who may be 
actively or passively looking for a job or promotion. 
 
It's something I wish I had a year ago. 
 
As mentioned eaerlier, trust this oft-rejected fool that this resume format is perfect. I know 
this because I tried many, many other formats and this one was the one that landed me and 
my colleagues roles much quicker and added a "WOW" factor to it. 
 
Some additional notes on resumes: 
 
Usually keep it to one page. 
 
Keep the format and font the same as these examples; just put in your information. I 
included other CVs to showcase a variety of roles/careers. I think there is some formatting 
errors on a couple resumes, but you can fix those. I saved them as Word files so they are 
editable. :) 
 
Believe me when I say numbers mean everything in a resume, no matter the industry. So 
put them on as many bullet points as you can. Hiring managers love that. Which is better? 
"responsible for managing team and hosting meetings" or "managed team of 20 coworkers, 
whose combined sales reached 112% quota" See what I'm sayin? 
 
Keep this bullet point format: Past tense verb (created, developed, etc) ---> number ---- 
result number. Every bullet point, or as many as possible. Search resume verbs in google 
for ideas, or use the ones in the resumes provided. 
 
Did I mention have a lot of numbers on it? Just want to hammer that home. As many bullet 
points as you can. Numbers = profit or quantifiable results, separating you from the "vague 
description" applicants. It all falls apart if you don't do this, in my experience, and the 
resume will never get looked at, I can darn near 100% promise that. 
 
Inverted pyramid style: Chronological order, most recent job = 7 bullet points, next most 
recent = 5-6, etc etc all the way down. Some can be equal, it just has to be decending 
order. This looks good visually and they mostly care about what you did most recently 
anywways. 
 
Write a bad ass description of the company you worked for, right under your job title. This 
shows the recruiter how awesome that company is and it helps them understand what 
their mission is or even just what that company does, if it isn't obvious.This is *KEY!*Ex: 
"Johnny's Burger Joint was rated as the top burger restaurant in Boston by Boston Magazine. 
They serve an avg. of 1000+ customers a day and my franchise was rated the top out of 
200+ locations across America." See how much better that is than just the name? You feel 
the difference? 
 
Numbers below ten, spell out. All others just write the number. Instead of exact numbers, 
when they get too big, write a "+ after the rounded number (ex: "157 employees ---> "150+ 
employees") and with numbers 1,000 and up abbreviate with capital "K" for thousand, "M" 
for million (ex: $23,800 ----> $23K+; $5 million ---> $5M) 
 
Exectuive summary also has numbers and must be bad ass. No more than two sentences. 
See examples. 
 
I changed all the names in the resumes to protect the innocent :) 
 
Notes on how to find jobs/ grow network: 
 
Please, please, pleeeeeease don't waste your time applying to LinkedIn or Indeed posted 
jobs. 99% chance it's a waste of time. I sent out 500+ resumes like that over the course of a 
year and got one interview from it. 
 
Total fail. 
 
Now that I work for a large company, I see just how true that is. We did a hiring spree at the 
beginning of this quarter and every single one of the new hires was a referral. 
 
Every. Single. One. 
 
Companies just post those because they ... have to? Not really sure, but again, this is my 
experience. 
 
I can't stress enough how important it is to get an in at a company. 
 
So how do you do that if your network is small or you dont have any friends (like me! lol)? 
 
Get your LinkedIn up and going - this is super important because its the first thing hiring 
managers look at. 
 
If you have exhausted all your friends and family to see if their company has a role you 
want, try this LinkedIn approach (the modules in the link also have other methods outside 
this one as well): 
 
What I did was paste my resume info in the description field on LI, added a nice photo and 
background, and added a ton of people from realtor groups (they always accept requests) 
to get me to the coveted 500+ connection badge and make me look suuuuuuuper cool. (LI 
has a limit to the number of adds a day, so will take a few days to accomplish this). 
 
I then sent DMs to people in a role or company that I wanted to work for. It went something 
like: 
 
"Hey (name)- just wanted to say that I love (company name). Your job as a (role) is kind of 
what I have been wanting to do for some time. How do you like it?" People are flattered you 
like their role, and it opens the dialogue up for more conversation, which is when you later 
ask to speak with them about the company in a call (more details on that in the link). 
 
Use the free site hunter.io to find anyones work email (i.e. recruiters) to send cold emails to 
(email templates in the link), or you can get even slicker and use a free scraping software 
(google differnet ones) to extract emails from LinkedIn profiles, if they arent publicly listed. 
Totally legal, btw and a great resource. 
 
------------------------ 
 
Look, the job search made me super depressed that year, and more anxious than I ever was 
in my life. 
 
I don't want that for anyone. 
 
That's why I took the time to make this guide. 
 
I want the process to be as easy as possible for everyone and for free. 
 
Because let's be honest, in all our schooling, NO ONE EVER TAUGHT US HOW TO DO THIS 
AND IT IS SUPER IMPORTANT! Am I right?? 
 
Anyways, best of luck to you all and please feel free to offer suggestions in the comments 
to methods that worked for you as well. 
 
To your success! 
 
Edit: ********* 
 
Thanks everyone for the positive feedback! I put a good deal of time into this and wasn’t 
sure if anyone would notice but so glad it’s helped! 
 
I have more free resources and will put them in the link when I get more time. 
 
I also removed a link to a scraping software I previously provided, which resulted in a 
temporary ban from the mods. I am not affiliated with any company and glad the mods 
brought this to my attention, so I deleted it. Many have free versions to try out, very easy to 
find. 
 
Please share this with anyone you know looking for work and let’s keep the dialogue around 
other tactics that work to help all of us get that dream job faster! 
 
Collaboration > competition 

---
A Guide to Computer Science Career Paths 
Why Should You Pursue a Career in Computer Science? 
We use technology every day—from making essential purchases to chatting with friends on 
social media. If you’re interested in using technology to solve everyday problems, a career 
in computer science may be right for you.  
 
Computer science can be a rewarding career for those with an aptitude for math and 
technology, but it’s so much more than crunching numbers and coding languages. 
According to the U.S. Bureau of Labor Statistics (BLS) Occupational Outlook Handbook, 
computer scientists advance computing technology and innovate existing 
technologyExternal link:open_in_new. At its core, a computer science career focuses on 
finding the most efficient approach to improve computing technology performance. If you 
are deciding how to get into computer science, it’s important to look at computer science 
career options to understand which is the right fit for you.  
 
Do You Need a Master’s in Computer Science? 
When considering a career in computer science, it’s important to note that most jobs in the 
computer science field require a master’s degree in computer science or a related 
disciplineExternal link:open_in_new, according to the BLS. Computer scientists work in a 
diverse range of specialized fields. For example, a computer scientist working on 
biomedical applications may have a background in biology in addition to a Master of 
Science (MS) in computer science.  
 
An MS in computer science typically requires two to three years of study, after you have 
earned a bachelor’s degree in computer science or a related field. While it’s not always 
required, a master’s in computer science can be a step toward maximizing your career 
potential and opening doors for new opportunities, such as teaching or managerial 
positions. A number of master’s in computer science programs allow students to tailor 
their education to specific needs or interests and gain niche skills in subfields, such as 
artificial intelligence.  
 
Can You Get a Master’s in Computer Science Without a Bachelor’s in CS? 
When considering a career change to computer science, you might be wondering: Can you 
get a master’s in computer science without a bachelor’s in computer science? According 
to the IEEE Computer SocietyExternal link:open_in_new, most professionals in the 
computing industry have at least an undergraduate degree in math, computer science, 
software engineering or a related field. While an undergraduate education in computer 
science is one way to learn about the fundamentals of computer science and prepare 
toward an advanced degree, some graduate programs are open to non-CS majors. A 
master’s education in computer science allows candidates to deepen their knowledge and 
become more specialized, according to a guest post on Communications of the 
ACMExternal link:open_in_new, the official blog for the Association for Computing 
Machinery (ACM).  
 
Computer Science Career Outlook 
Computer science is an in-demand career right nowExternal link:open_in_new, with 
employment opportunities projected to grow 15% from 2019 to 2029, according to the BLS. 
This is much faster than the average for all careers. As the need for new and improved 
technology continues to grow, the demand for computer scientists will as well. Some areas 
of growth in the industry include data collection and data mining services, cybersecurity 
and software efficiency.  
 
There are many industry trends, such as security cross-cutting issues, increased online 
courses in education, universal memory and computing, that open up more opportunities 
for growth within a computer science career, according to the IEEE CS 2022 Report (PDF, 
7.6 MB)External link:open_in_new.  
 
Computer Science Career Salaries 
Computer science career salaries tend to have a wide range. The median annual wage for a 
computer scientist was $126,830 in May 2020External link:open_in_new, according to BLS 
pay data. The highest 10% earned more than $194,430, while the lowest 10% earned less 
than $72,210. A computer science career salary depends on your skill set, specialization 
and location, among other factors. According to the BLS, top industries for this profession 
include:  
 
Industry 
Median Annual Salary (as of May 2020) 
Software publishers  
$145,920 
Research and development in physical, engineering and life sciences 
$140,000 
Computer systems design and related services 
$136,950 
Federal government (except postal service) 
$112,930 
Colleges and universities 
$82,220 
Computer Science Career Salaries 
Computer Science Career Paths 
There are many computer science career paths, ranging from software engineer to 
technical writer. In a short publication on computing disciplines (PDF, 94 KB)External 
link:open_in_new, the ACM reports that computer science career options include: 
 
Computer Engineering: planning and designing the digital hardware and software systems. 
Computer Science: developing computing solutions.  
Information Systems: communicating computer information systems to a business.  
Information Technology: helping maintain computer infrastructure and addressing the 
needs of the people who use it.  
Software Engineering: developing software systems. 
Knowing what each computer science career entails can help you determine the best fit for 
you. Find below the scope of work for various computer science roles: 
 
Software Engineer 
A software engineerExternal link:open_in_new is a computer science career professional 
that focuses on the impact of software systems in safety-critical applications. Their work 
often involves software development and testing in order to assess customer needs. They 
may work closely with software developers and share similar duties in the workplace. 
 
Data Scientist 
A data scientist analyzes data and builds statistical models with insights used to inform 
business decisions. According to leading analytics company SAS, data scientist job 
dutiesExternal link:open_in_new include but are not limited to:  
 
Collecting large amounts of data and transforming it into easy-to-understand formats. 
Solving business problems using data-driven techniques. 
Using programming languages. 
Using analytical techniques like machine learning, deep learning and text analytics.  
Communicating with IT and businesses.  
Spotting trends and patterns in data that can help a business.  
Software Developer 
Software developers create and develop computer programs and the underlying systems 
that run control networks. They plan the entire development process for a software 
program and give instructions to programmers who will write the code. According to the 
BLS, software developers are typically tasked with the followingExternal link:open_in_new:  
 
Analyzing user needs in order to inform the process of designing, testing and developing 
software to address those needs.  
Recommending software upgrades for users’ existing programs and systems. 
Creating models and diagrams that show programmers the software code needed.  
Software maintenance and testing. 
Collaborating with other computer specialists to create optimum software.  
Designing applications or systems and planning how they will work together. 
Web Developer 
Web developers are the creative masterminds behind maintaining websites to fit a client’s 
needs. They optimize a website’s performance and capacity, as well as content creation. 
According to the BLS, the functions of a web developerExternal link:open_in_new include:  
 
Technical construction of the website. 
Creating the basic framework of the website and ensuring functionality. 
Establishing procedures that allow others to add new pages to a website. 
Discussing major changes to a website with clients. 
Creating technical features for a website’s look.  
Developing and integrating website layout, graphics and application.  
Monitoring website traffic. 
Database Administrator 
Database administrators focus on monitoring database performance. They do this by 
utilizing software to store and organize data. Database administrators may perform the 
following job responsibilitiesExternal link:open_in_new, according to the BLS:  
 
Backing up and restoring data to prevent data loss. 
Ensuring organizational data is secure.  
Identifying users’ needs to create and administer databases. 
Operating databases efficiently without error. 
Testing modifications to database structure. 
Maintaining databases and merging old ones into new.  
Network Administrator 
A network administrator focuses on the day-to-day operations of networks and computer 
systems. They support an organization’s computer systems as well as data communication 
systems. According to the BLS, the network administrator’s scope of workExternal 
link:open_in_new encompasses:  
 
Organizing and installing network hardware and software. 
Making upgrades and repairs to networks as needed. 
Maintaining network and computer system security. 
Evaluating network or system performance. 
Adding users to a network. 
Updating security permissions on the network.  
Web Designer 
A web designer oversees the design, layout and look of a website. Web designers often 
carry out the following tasksExternal link:open_in_new, as noted in the BLS Occupational 
Outlook Handbook:  
 
Meeting with clients to discuss design and functionality of a website. 
Creating and testing applications, interfaces and navigation menus for a website. 
Using programming languages to write code for the website.  
Working with graphic designers to determine the website’s layout.  
Technical Writer 
Technical writers work closely with computer hardware engineers and software developers 
to manage information flow. They gather technical information and communicate them 
through the organization. According to the BLS, technical writers perform a variety of 
editorial-related tasks, includingExternal link:open_in_new: 
 
Writing instruction manuals, how-to guides and journal articles to communicate complex 
technical information more easily.  
Studying product samples with product designers and developers. 
Writing or revising supporting content for a client.  
Incorporating graphics to improve a user’s understanding of the material.  
Systems Analyst 
System analysts organize computer systems and procedures within information 
technology to help businesses operate more efficiently. According to the BLS, systems 
analysts’ job dutiesExternal link:open_in_new include: 
 
Consulting with an organization’s management to determine the role of IT systems. 
Researching emerging technologies that might help increase efficiency.  
Providing a cost-benefit analysis to computing infrastructure. 
Coming up with new ways to add functionality to existing computer systems. 
Choosing and configuring hardware and software. 
Testing systems to see if they work as expected. 
Computer Programmer 
A computer programmer is responsible for writing code that allows for software to function.  
They help turn the programs that software developers create into instructions that a 
computer follows. Computer programmers are trained to perform the following 
tasksExternal link:open_in_new: 
 
Testing newly created applications and programs for errors to ensure they’re working 
properly. 
Writing programs in computer languages. 
Updating and expanding existing programs. 
Using code libraries to simplify writing. 
Computer science offers a variety of career options that go beyond the technological 
sphere. It can be useful in multiple areas of work, such as communications or project 
management. Whatever you make of your master’s in computer science degree, there is 
more than one direction you can follow. 

---
In the software engineer interview process, behavioral interviews may seem so much more 
varied and unstructured as compared to technical interviews. However, in most cases, the 
interviewer is actually just trying to get to know you better and there's always a set of 
common questions that need to be asked to achieve that. 
 
Most commonly asked behavioral questions across top tech companies 
Here are some of the 30 most commonly asked behavioral interview questions across top 
tech companies: 
 
Why do you want to work for X company? 
Why do you want to leave your current/last company? 
What are you looking for in your next role? 
Tell me about a time when you had a conflict with a co-worker. 
Tell me about a time in which you had a conflict and needed to influence somebody else. 
What project are you currently working on? 
What is the most challenging aspect of your current project? 
What was the most difficult bug that you fixed in the past 6 months? 
How do you tackle challenges? Name a difficult challenge you faced while working on a 
project, how you overcame it, and what you learned. 
What are you excited about? 
What frustrates you? 
Imagine it is your first day here at the company. What do you want to work on? What 
features would you improve on? 
What are the most interesting projects you have worked on and how might they be relevant 
to this company's environment? 
Tell me about a time you had a disagreement with your manager. 
Talk about a project you are most passionate about, or one where you did your best work. 
What does your best day of work look like? 
What is something that you had to push for in your previous projects? 
What is the most constructive feedback you have received in your career? 
What is something you had to persevere at for multiple months? 
Tell me about a time you met a tight deadline. 
If this were your first annual review with our company, what would I be telling you right 
now? 
Time management has become a necessary factor in productivity. Give an example of a 
time-management skill you've learned and applied at work. 
Tell me about a problem you've had getting along with a work associate. 
What aspects of your work are most often criticized? 
How have you handled criticism of your work? 
What strengths do you think are most important for your job position? 
What words would your colleagues use to describe you? 
What would you hope to achieve in the first six months after being hired? 
Tell me why you will be a good fit for the position. 
Airbnb Software Engineer behavioral interview questions 
While loving to travel or appreciating Airbnb's growth may be good answers, try to 
demonstrate the deep connection you have with the product. 
 
What does "belong anywhere" mean to you? 
What large problems in the world would you solve today? 
Why do you like Airbnb? 
If you had an unlimited budget and you could buy one gift for one person, what would you 
buy and who would you buy it for? 
If you had an unlimited budget and you could go somewhere, where would you go? 
Share one of your trips with us. 
What is the most challenging project in or out of school that you have worked on in the last 
6 months. 
What is something that you don't want from your last internship/job? 
Give me an example of when you've been a good host. 
What's something you'd like to remove from the Airbnb experience? 
What is something new that you can teach your interviewer in a few minutes? 
Tell me about why you want to work here. 
What is the best gift you have ever given or received? 
Tell me about a time you were uncomfortable and how you dealt with it. 
Explain a project that you worked on recently. 
What do you think of Airbnb? 
Tell me something about yourself and why you'd be a good fit for the position. 
Name a situation where you were impressed by a company's customer service. 
How did you work with senior management on large projects as well as multiple internal 
teams? 
Tell me about a time you had to give someone terrible news. 
If you were a gerbil, which gerbil would you be? 
What excites you about the company? 
How does Airbnb impact our guests and hosts? 
What part of our mission resonates the most with you? 
Source: Glassdoor 
 
Amazon Software Engineer behavioral interview questions 
How do you deal with a failed deadline? 
Why do you want to work for Amazon? 
Tell me about a situation where you had a conflict with a teammate. 
In your professional experience have you worked on something without getting approval 
from your manager? 
Tell me a situation where you would have done something differently from what you 
actually did. 
What is the most exceedingly bad misstep you've made at any point? 
Describe what Human Resources means to you. 
How would you improve Amazon's website? 
Source: Glassdoor 
 
ByteDance Software Engineer behavioral interview questions 
What do you know about <role> and why? 
Take me through a product you launched from start to end 
What's the biggest achievement in your previous projects? 
Tell me about a recent failure and what you learned from the experience 
Why do you want to work at ByteDance? 
What makes you a good fit for this position? 
What excites you about the role? 
Source: Glassdoor 
 
Dropbox Software Engineer behavioral interview questions 
Talk about your favorite project. 
If you were hired here what would you do? 
State an experience about how you solved a technical problem. Be specific about the 
diagnosis and process. 
Source: Glassdoor 
 
LeetCode for Front End 
Built by ex-FAANG Senior Engineers, GreatFrontEnd is the fastest way to prepare for a Front 
End interview. 
 
Hired Software Engineer behavioral interview questions 
Tell me about yourself. 
What is your biggest strength and area of growth? 
Why are you interested in this opportunity? 
What are your salary expectations? 
Why are you looking to leave your current company? 
Tell me about a time your work responsibilities got a little overwhelming. What did you do? 
Give me an example of a time when you had a difference of opinion with a team member. 
How did you handle that? 
Tell me about a challenge you faced recently in your role. How did you tackle it? What was 
the outcome? 
Where do you want to be in five years? 
Tell me about a time you needed information from someone who wasn't responsive. What 
did you do? 
Source: Glassdoor 
 
Lyft Software Engineer behavioral interview questions 
Tell me about your most interesting/challenging project to date. 
Why Lyft? What are you looking for in the next role? 
Source: Glassdoor 
 
Palantir Software Engineer behavioral interview questions 
What is something 90% of people disagree with you about? 
What is broken around you? 
How do you deal with difficult coworkers? Think about specific instances where you 
resolved conflicts. 
How did you win over the difficult employees? 
Tell me about an analytical problem that you have worked on in the past. 
What are your three strengths and three weaknesses? 
If you were in charge of picking projects for Palantir, what problem would you try to solve? 
What are some of the best and worst things about your current company? 
What would your manager say about you? 
Describe Palantir to your grandmother. 
Teach me something you've learned. 
Tell me a time when you predicted something. 
If your supervisors were to rate you on a scale of 1-10, what would they rate you? 
What was the most fun thing you did recently? 
Tell me the story of how you became who you are today and what made you apply to 
Palantir. 
Source: Glassdoor 
 
LeetCode for Front End 
Built by ex-FAANG Senior Engineers, GreatFrontEnd is the fastest way to prepare for a Front 
End interview. 
 
Slack Software Engineer behavioral interview questions 
Tell me something about your internship. 
Why do you want to join Slack? 
Tell me about your past projects. 
Explain me your toughest project and the working architecture. 
Apart from technical knowledge, what did you learn during your internship? 
If someone has a different viewpoint to do a project like different programming language, 
how would handle this situation? 
What are your most interesting subjects and why? 
Did you find any bugs in Slack? 
What is your favorite feature and why? 
Source: Glassdoor 
 
Stack Overflow Software Engineer behavioral interview questions 
What have you built? 
What is the hardest technical problem you have run into? 
How did you solve it? 
Where do you see yourself in 5 years? 
Why do you want to work here? 
How do you handle disagreements with co-workers? 
Source: Glassdoor 
 
Stripe Software Engineer behavioral interview questions 
How do you stay up to date with the latest technologies? 
Explain a project that you worked on recently that was difficult. 
Where do you see yourself in five years? 
Source: Glassdoor 
 
Twitter Software Engineer behavioral interview questions 
What would your previous boss say your biggest strength was? 

---
Salary negotiation strategies everyone in tech already knows — but you don’t 
If you're not plugged in to the right social circles, you're locked out of tribal knowledge on 
tech compensation and it’s a huge disadvantage. 
 
Earn $50,000+ just by asking the right way. Learn to speak the language of tech 
compensation. 
 
Understand tech compensation — use levels & equity to your advantage. 
Figure out your worth — use the right data to value your skills. 
Ask the right questions — gather information from the recruiter. 
The salary negotiation — what to say to walk away happy. 
Don't have time to read? Get the PDF in your inbox. 
you@example.com 
First, a reality check: there's a lot of money in tech. New grads at big tech companies will 
routinely earn $150k+ starting salary. With a bit of work, you can reliably achieve $500k 
total comp, even as a frontline individual contributor. 
 
Millions of dollars change hands in salary negotiation — you owe it to yourself to 
understand compensation. 
 
Understand tech compensation 
There’s a lot outside of salary that forms your total compensation package. Your "total 
comp" includes at least: 
 
This complexity exists partly to help both sides feel like they got a deal. If there's only one 
number to argue on, nobody walks away happy. A big part of salary negotiation is using the 
complexity to your advantage: knowing which lever to pull. 
Base salary — the money you’re paid every pay period. 
Equity — ownership stake in the company, could easily be half your total comp or more. 
Benefits — in the US, health insurance alone can easily cost your employer $500-
1000/month. Benefit packages also includes things like vacation days, free food and other 
perks. This is (mostly) not taxed, so you’d rather have these benefits than the equivalent in 
cash. 
Annual bonus — percentage bonus on top of your salary based on performance, common 
only with public companies. The recruiter will likely quote you a "target bonus" (e.g. 15%), 
which is what you can expect if you meet expectations. Generally also comes with 
additional equity (a "refresher"). 
Signing bonus — one-time bonus paid out either when you sign or the day you start. Might 
come with a clause that you must pay it back if you leave after X months. Quite common in 
large tech companies, can be anywhere from $10k–$100k. Highly negotiable. 
Other perks — a whole suite of one-time or ongoing cash perks, like relocation package, 
phone stipend, commuter benefits, car allowance, etc. 
The biggest input that controls comp is "level", a number that express your seniority. For 
example, level E3 at Facebook is new grad, E4 is for hires with a few years experience and 
so on, up to E9 (after the first few levels, experience becomes less important). 
 
Levels are completely non-standard between companies (e.g. an “L5” engineer at Amazon 
is not equivalent to an “E5” engineer at Facebook) 
The more expensive/higher level you are, the more complex your comp mix becomes and 
the more it'll skew towards equity. 
 
Understanding & valuing equity 
Womenearn half the equity men do – equity is complex and ripe for bad outcomes. 
 
Equity is an ownership stake in the company. Your stake in the company converts to money 
only if one of two things happens: the company is purchased or it becomes listed on the 
stock market (an IPO). 
 
An equity grant is generally for a 4 year period — you’ll get X number of shares over 4 years 
and you'll progressively earn (or vest) over that period. Vesting will generally be subject to a 
1-year “cliff”: you don’t earning anything in the first year, and on your first anniversary, you 
vest ¼ of the shares. This formula (“4 year vest, 1 year cliff”) is nearly universal in tech. 
 
Equity is complex, the Holloway guide is the best overall overview if you want to learn more. 
The company will never give you stock directly, because you'd have to pay taxes on it right 
away. Instead, companies have designed roundabout mechanisms to delay taxation. The 
two most common are RSUs and stock options. 
 
If you were offered Restricted Stock Units (RSUs), common with larger companiesAn RSU 
means the company promises to give you shares whenever they IPO or sell (they're not 
giving it to you right away because you'd pay taxes now). This is good and the lowest 
risk/complexity to you.This is a future promise and because of that, it generally comes with 
a lot of strings attached. For example there often are constraints on when, how and to 
whom you can sell your equity. 
If you were offered stock options (ISOs/NSOs), common with startupsA stock option is the 
option to buy shares at a discounted price, known as the "strike price".For example, you 
might have the option to buy shares at $1. If, based on the current valuation of the 
company, the shares are worth about $1.50, your equity is worth $0.50 × number of options 
you have.You're hoping the shares will be worth $10+ by the time you leave: the wider the 
gap, the better. The strike price is frozen when you join and you only have to decide whether 
you want to buy shares when you leave.To emphasize, you need to spend money to get 
shares. That can easily cost you 10s or 100s of thousands when you leave — even if you're 
getting a great deal on the shares, this may or may not be money you have lying 
around.Stock options are generally more volatile than RSUs but are considered preferable 
because if you play your cards just right, they have big tax advantages. The tax implications 
are intricate and you should absolutely speak to a tech-focused CPA if any meaningful part 
of your compensation is stock options. 
When a company offers you equity, they’ll quote you a value: X,000 shares over 4 years, 
“which is worth $X00,000.” (if they don't, ask) 
 
That value is based on what investors have paid for the company in the last financing 
round. If the latest investors paid $1M for 1% of the company, the company's valuation is 
$100M and therefore a 0.1% stake is "worth" $100,000. 
 
Generally, all tech companies, small to large, offer equity but not always to all employees 
— support, marketing, operations, etc. might not always get equity, especially junior 
employees. 
Depending on the stage of the company, that number is anything from “as good as cash” to 
pie-in-the-sky voodoo. 
 
For a public company listed on the stock market (Facebook, Amazon, etc.)You’ll be able to 
sell your shares directly on the stock market. There’s some restrictions (for example, 
lockout periods: you’ll only be allowed to sell certain weeks of the quarter), but the shares 
are basically as good as cash.However, the value of the shares will vary a lot throughout 
your tenure. It’s as if a good chunk of your salary is forced to be invested in one stock — it’s 
probably not what you’d do if you had a choice and that lack of diversification is worth 
something.At Candor, we value equity in a public company at about 80-90%, depending on 
how much you believe in the company will do on the stock market in the next few years. 
For a growing, successful pre-IPO company (Airbnb, Stripe, etc.)For a successful, high-
growth company with prominent investors, you can reasonably expect your equity will be 
worth something, at some point.Regardless, it'll be years before you see any money. 
Consider the equity as worth 60-90% of the quoted value, depending on how much you 
believe in the company, how far along they are and your risk tolerance. Also, keep in mind 
your chances are good, but there's no guarantees.For a mature company that's clearly on 
track to IPO (Doordash, Airbnb, etc.): you probably should prefer equity over cash. Being an 
employee is one of the few ways a mere mortal can get equity. If you believe in the 
company's prospects and don't need immediate liquidity, consider valuing the equity at 
100-130% and negotiating for more equity over salary. 
For a young startupAssume you'll be bad at picking the right company — you’re worse than 
professional investors in basically every way: they have more experience than you, they 
have more information and plus they have a chance to diversify. And yet even the 
professionals do very poorly: easily 50-80% of early VC investments will never exit for 
anything meaningful.Treat your equity as a lottery ticket. Disregard any $ value the recruiter 
might have told you and be ready to live 100% on the base salary. Think hard if you’re ok 
with that.You do have one advantage: you’ll get an inside look at the company. If you join an 
early stage company where a substantial part of your compensation is equity, your job is to 
figure out whether this company will make it and be ready to leave promptly if you don’t 
think you can shift the trajectory. 
In all cases — congrats! Whether you like it or not, you're now a startup investor. Investor 
Harj Taggar has sometips on how to pick the right company. 
 
Congrats — you're now an investor! You're investing hundreds of thousands of dollars in 
companies you know very little about — picking right is the single most important 
consideration to your lifetime earnings and personal growth. 
 
Don't have time to read? Get the PDF in your inbox. 
 
you@example.com 
Figure out your worth 
Don't accept a lower salary because "you don't really need the money" — what you’re paid 
has nothing to do with your costs. 
 
Similarly, negotiation arguments around your life costs (mortgage, student debt, etc.) will 
be unconvincing to recruiters. Your skills have a market value, what you do with that money 
has no place in the compensation conversation. 
 
Please, please, don't rely on Glassdoor 
Payscale,Glassdoor,Comparably — they're all wildly inaccurate for tech. These sites heavily 
mistreat equity (a major component of tech compensation) and are often very out of date. 
It routinely causes people to accept less than they deserve. 
 
Compensation is generally lower for startups/pre-IPO companies (primarily due to equity). 
It's lower for non-technical roles, outside major tech hubs and considerably lower outside 
the US (e.g. EU). 
Your options: 
 
H-1B visa filings are authoritative, but only have base salary 
AngelList is a good reference for both base and equity for startups 
Triplebyte has high quality data for technical roles at startups (base only) 
Blind is helpful for big tech companies 
Unfortunately, the best and most up to date information is a moving target but common 
knowledge among HR professionals. The easiest way for you to tap into that is through 
third-party recruiters — they'll gladly take your call. 
 
The honest truth about salaries: your employer has much better information than you to 
figure out how much you're worth. 
 
Don't have time to read? Get the PDF in your inbox. 
 
you@example.com 
Ask the right questions 
First, delay the salary conversation until both of you are convinced this is the right job. 
Never, ever share your previous salary. In Californiaand many other US states, it's illegal 
from an employer to ask about your current salary. 
 
They can still ask about your salary expectations or salary requirements (and often will 
early in the interview process), respond politely but firmly that you're not comfortable 
sharing at this stage. 
 
Play 
What salary are you looking for? 
I think it's a bit too early in the conversation to discuss that, I need to learn more about the 
team and would love to discuss when we get closer. 
Well Erica, I want to make sure I don't waste your time. Can you give me a range? 
I'm certain we'll be able to come to a good agreement if there's a mutual fit, but it's really 
too early to tell. 
Every employer will ask about expected salary and every experienced professional knows 
to not answer. This is a standard part of the hiring dance, don't be afraid to stand your 
ground. 
 
At some point later, the recruiter will let you know they would like to extend an offer and 
they’ll schedule a call. It might not be made explicit, but this is the money conversation. 
For us, this is going be a fact-finding conversation. 
 
Play 
Hi Erica! The team was very excited to meet you and I’d love to share the details of your 
offer: $125k base, $300k RSUs (over 4 years) and $20k sign on bonus. 
Really excited about the team! Thank you for the offer. I’ll need time to review this, can we 
speak in a few days? In the meantime, I have a few questions for you. 
Sure! Go ahead. 
That’s it. Share your excitement about the new job, but control every urge to react to the 
numbers, share your previous salary, argue or try to make your case. If the salary offer is 
higher than you expected, don’t act surprised or let it come across. 
 
Our goal is to collect information and retreat to a place where we analyze all the details 
with a cool head. Follow up with these questions: 
 
This is a negotiation where hundreds of thousands of dollars will change hands: it’s 
perfectly reasonable to ask for some time. 
What level is the job offer? What are the requirements for this level vs. the level above it? 
What is the salary band for this level? This is 100% completely reasonable thing to ask. In 
California, an employermust legally provide thisif asked. 
How much is the equity worth currently? You can also ask: what percentage of the 
company does the equity represent? What is the valuation of the company? 
What is the vesting schedule? Is there a 1 year cliff? Are there quarterly vesting deadlines I 
should know about? Confirm whether the equity was quoted to you on a yearly basis or 
over 4 years. 
For options: what is the strike price? (the price you'll pay for the shares) How long after 
leaving do I have to exercise the options? 
If you're told the offer has a hard deadline (an “exploding offer”)Sometimes a tight deadline 
is legitimate but often it’s a mechanism to prevent you from looking around too much. 
“Exploding offers” are a bad industry practice and unfortunately very common with new 
grad offers, where companies are trying to lock down candidates before everyone 
else.Here’s a secret: if you renege on a signed job offer, nothing bad will happen. You might 
get told it’ll ruin your reputation, but especially in a large company, you'll be fine.You’re 
going to dedicate years of your productive life to an organisation, it’s perfectly reasonable 
to make the best decision for you. Don’t sign an offer you intend to renege on, but 
especially in face of questionable ethical behavior, don’t feel bad if you have to walk it 
back. 
The biggest mistake you can make in salary negotiation is doing nothing. Everyone regrets it 
— the other side expects you to negotiate, negotiating is what successful professionals like 
you do. 
 
Don't have time to read? Get the PDF in your inbox. 
 
you@example.com 
The salary negotiation 
Remember: the company just spent 10s of thousand finding you, vetting you, etc. They’ve 
wasted time wading through a glut of unqualified candidates. The recruiter has quotas to 
fill. The hiring manager needed the job filled months ago and now, finally, they have you. 
Everybody wants this deal to happen. 
 
Determine if the level is right 
The biggest lever that controls compensation is level. Each level has a salary range and 
they overlap: if level 4 is $125k-$155k, level 5 might be $145k-$160k. There are seperate 
bands for base and equity. 
 
However, a higher level isn't just a free higher salary: it comes with higher job expectations. 
It’s better to be on the high end of lower level band. You should target a level you’re 
confident you can be promoted within 1 year and target the higher end of the band. 
 
For technical roles, your performance on the system design interview is particularly 
important for leveling. 
However, if you’re speaking to a major tech company (Facebook, Google), it’ll be quite 
difficult to move your level, especially for technical hires. Level is generally set 
independently by a hiring committee based on your "packet". 
 
The committees tend to be very conservative and would rather you join at a lower level and 
promote later. 
 
For smaller companies and especially non-technical roles, you'll have more leeway: 
leveling is loosely based on you work experience and your previous level/seniority. 
 
If you want to move your level, master the art of listening carefully and repeating. Earlier 
you asked the recruiter about the qualifications required for the level, when you ask about 
about a level change clearly connect it to the requirements laid out by the recruiter. 
 
Play 
Love to understand levels a bit more, what distinguishes an L7 over an L6? 
L7s are generally people who've led any-wide projects with many cross-functional partners 
and executive visibility. 
later 
Hi Mike — can we revisit the offer level? In my current role, I lead a major company-wide 
infrastructure redesign with regular checkins with the CTO. It really seems like L7 might be 
a better fit and would help set me up for success. 
Can you tell me more about your responsibilities? I can speak with the hiring manager 
Monday. 
Negotiate for the upper end of the band 
Once you’re convinced level is right, you need to negotiate compensation. Target a total 
compensation number that’s in the upper half of the band for your level. 
 
Once you have your number in mind, be firm and specific. Only negotiate if you mean it: 
you should be genuinely willing to commit if the other side can get to your number. If you 
still have reservations about the company, deal with that first: you're not ready to negotiate. 
 
The most reliable way to get more money is through competing offers. Consider 
interviewing with your 2nd or 3rd tier choices or getting a counter-offer from your current 
employer. 
 
Never bluff about having a competing offer. Recruiters are very finely attuned to 
compensation at other companies and will know if you’re lying. 
It’s sometimes even possible for recruiters to make offers above the upper bound of the 
band, but that generally requires additional level of approval only granted to candidates 
with strong competing offers. 
 
If you can’t get what you want, offer to shift between compensation components but don’t 
back down on total compensation. In order of difficulty: base salary, equity, signing bonus. 
Offer to shift some base to equity first and as a last measure, ask for a larger signing bonus. 
 
Email the recruiter and say you've had a chance to think through the offer and would love to 
discuss. They'll schedule a phone call. 
 
Never negotiate over email: email is not how you get the other person to go the extra mile. 
The playbook 
Open by emphasizing just how excited you are about the team and the role: it's very 
important that you communicate that you're a serious buyer. 
 
Then, set a clear total comp goal. When you get pushback on a particular comp mix, 
always come back to the total comp number. 
 
Good salary negotiation isn't an adversarial game of counter-offers — make it clear you're a 
team working together to overcome a common hurdle. 
 
Move downwards from salary, equity, signing bonus until you can put together a comp mix 
that hits your total comp. If you can't, be ready to walk back, continue interviewing and 
follow up over the next few days. Time can help you get more leverage. 
 
Mention you have other job interviews lined up, but you'd really love to join the company. 
Make it clear that if the recruiter can get your total comp number, you're in. 
 
Play 
Hi Mike — really excited about the team, loved meeting everyone. In terms of total comp, 
I'm looking for something closer to 250k. Would you be open to a base of $150k? 
Well. This is the most we can do for this position, it's a fairly junior role. 
I don't think I can do it at the current level — $250k is what I'd need to be able to sign. Can 
you be more flexible on equity? 
Hmm... 
How about $20k more equity, the rest as a signing bonus? That would get us to $250k. 
Hmm... That's going to be tough but I can see what I can do. 
Ok, I understand. I'm ready to sign if we can get to that number. 
Followup with an email. 
 
Next steps 
 
Hi Mike, 
 
Incredibly excited about the role. Summing up our chat: you mentioned you'd look into 
additional equity and a signing bonus. Would love to be able to get us to $250k total comp. 
 
I have an onsite with Facebook next week but would love to be able to commit to this. Let 
me know when you hear back. 
 
If you don't hear back, followup after a few days. Make sure to keep the relationship warm. 
At some point, the recruiter will likely schedule another phone call. 
 
Play 
Hi Erica — had a chance to speak to my compensation analyst. We can do $15k extra 
equity a year. 
Amazing! Thank you. Can you do a $50k signing bonus? That would get us to $250k. 
I think that's doable. 
Awesome. I'm in. Can't wait to start! Please send me the offer in writing, I'll sign it 
immediately. 
Just remember: set a clear goal and politely but firmly ask for for what you want. 

---
What Is a Technical Interview? 
Unlike other types of interviews, tech interviews involve challenges and assignments. 
They’re more like an exam than a typical question-and-answer interview. 
 
Like the phrase “Show, don’t tell,” you have to prove that you have the skills required to do 
the job, rather than just tell the interviewer that you have them. 
 
Contrary to popular belief, the purpose of the technical interview is not to trick you with 
riddles, brain teasers, or impossible questions. Instead, it’s to see how you tackle real-
world problems–like the ones you might be facing once you have the job! 
 
preparing for your technical interview 
So, what happens in a technical interview? Every company is different, but let’s take a look 
at the average situations you might face. 
 
The stages of a technical interview 
Often, tech interviews will come in three basic stages: 
 
   1st stage: the technical screening interview (via phone or video). 
 
Good news! The company liked your resume and wants to talk to you more. 
 
This short social & technical screen interview stage is designed to see if you are qualified 
and enthusiastic enough to proceed to the next technical round. 
 
An initial technical screening interview typically lasts 15-30 minutes. 
 
video interview 
   2nd stage: remote coding interview/assignment. 
 
Some companies will want to test your coding skills with a preliminary test before having 
you actually come in. 
 
It may be conducted over the phone, via Skype or Zoom, or as a homework-type 
assignment through a web application or email. 
 
If the company is respectful of your time, a remote coding challenge should only take a few 
hours. 
 
man coding at home 
   3rd and final stage: onsite interview/whiteboarding challenge. 
 
This is the stage that most people call the actual “technical interview.” It involves an in-
person interview with coding challenges you have to complete on a whiteboard in front of 
the interviewer(s). 
 
Tech interviews at this stage can also be done remotely over video conference if the 
company is remote. 
 
Whiteboard interviews typically last 1-2 hours, but the whole onsite technical interview can 
be several hours to a full day. 
 
Woman at whiteboard interview 
As I said before, though, every company’s tech interview process is different. Here are a 
few examples of how some popular tech companies organize their technical interview 
stages: 
 
Google: initial phone or Google Hangout interview (30-60 min); onsite tech interview (~4 
hours made up of 4 separate interviews) 
Facebook: Initial technical screening interview (30-50 min); onsite interview (1 full day) 
Uber: initial phone screen (30-60 min); in-person interview (1 full day made up of 6 back-to-
back personal and technical interviews) 
How to prepare for a software developer interview also depends on the seniority of the role 
you’re applying for—e.g. is it more of a junior or senior position? 
 
Junior computer science interview questions and technical rounds may not be as intense 
as higher-level computer engineering interview questions. 
 
To find more about what the company you’re interviewing with might ask you, or more 
about their technical interview process, do a little research. 
 
Check to see if the company has a tech blog. Sometimes companies devote entire blog 
articles to their tech interview process and what to expect (here’s an example from a 
company called Asana). 
 
Tech company meeting 
Failing that, Glassdoor has an “Interviews” tab for lots of companies, big and small, where 
current and former employees—as well as people who interviewed but didn’t end up 
working for the company—share what the process was like. 
 
For example, here is Google’s interview tab on Glassdoor. This feedback could be about 
traditional or technical interviews, and some users might even share what kinds of coding 
interview questions they were asked. 
 
If you’re still coming up short, shoot the recruiter or hiring manager a quick email asking 
what the interview process will look like. Knowing the exact steps in the interview process 
can help you figure out how to prepare for coding interviews there. 
 
   Who you’ll be talking to at your technical interview 
Of course, this is another factor that will differ from company to company, but you’ll usually 
be looking at one of two situations based on company size: 
 
At a startup or smaller company: member(s) of the engineering team, a senior developer, or 
even the CTO. All interviewers typically have technical experience and may be your future 
bosses or coworkers. 
At a larger company: recruiter, HR staff, or a member of the engineering team. Some 
interviewers might have little tech knowledge, and it might not be people you’ll directly 
work with if hired. 
two women talking 
You may even have multiple interviews with different people–perhaps a whiteboarding 
technical interview with the tech team, a culture interview with HR, an executive interview 
with the CTO, and so on. 
 
Whatever the case, one good tech interview prep tip is to try researching your interviewers 
first by looking them up on LinkedIn. It can ease your interview anxiety to put a face to a 
name, plus you might find something you can connect over (you went to the same 
university, you have similar interests, or something like that to break the ice). 
 
For more on using LinkedIn to get a foot in the door, check out this guide to getting job 
referrals even as a tech newbie. 
 
   What to wear to your tech interview 
One of the most common questions people have during any job interview preparation 
process is what to wear. 
 
Interview clothing 
Although most tech companies have a relaxed, casual workplace, it’s still important to 
dress smartly. The general rule of thumb is to dress one level above the company’s dress 
code (e.g. if the company allows jeans and T-shirts, you should dress in business casual). 
 
To find the dress code, search for the company on social media platforms like 
Facebook/Instagram, look at their careers page, or consider asking the recruiter/HR staff. 
 
   What to bring to your coding interview 
You don’t really have to bring anything special to a technical interview beyond what you’d 
bring to a normal one. You’ll probably want to have basics like these: 
 
Notepad 
Pen 
Printed copies of your resume 
Don’t worry about bringing a laptop or coding samples (unless the interviewers specifically 
request those items). 
 
woman in an interview 
   How long are technical interviews? 
The technical portion of the interview process (whiteboarding) typically lasts 1-2 hours. 
However, the full interview process, from the phone screen to the final interview, could take 
much longer. 
 
Here’s a breakdown of some common time ranges: 
 
Technical phone/video screen: 15-30 minutes 
Remote coding interview/assignment: 1-2 hours 
Onsite interview: Often 1 full day of multiple interviews 
Whiteboarding challenge: 1-2 hours 
When all is said and done, it’s not uncommon for the whole process to last several weeks 
as you progress through the different rounds. 
 
Download the LinkedIn profile checklist 
 
Created with aspiring techies in mind. 
 
Enter your email address 
We use this field to detect spam bots. If you fill this in, you will be marked as a spammer. 
Don't worry. I'll never, ever spam you! 
Common Technical Interview Questions 
There are a wide variety of common technical interview questions you may come up 
against during your tech interview — it’s not all whiteboards and code. 
 
However, because every company is so different, it’s impossible to anticipate every 
possible coding interview question. 
 
Especially for backend developer interviews, some companies may ask computer science-
based questions that often include CS trivia, technical puzzles or brainteasers. Other 
companies may focus more on real-world problems that resemble day-to-day work at the 
company.  
 
Let’s look at some of the types and topics of programmer interview questions you might 
encounter during a technical interview. 
 
Tech interview questions 
Types of tech interview questions you may face 
A well-rounded software engineer interview will include questions that pertain to a 
candidate’s hard and soft skills. Here are a few question types you might be asked. 
 
   Behavioral: These questions pertain to how you’ve acted in a specific situation in the 
past. These are based on real life situations you’ve encountered. Examples include:  
 
Tell me about a time when you handled a challenging situation. 
Give me an example of a time when you worked effectively under pressure. 
What happened when you made a mistake at work? 
   Situational: These interview questions deal with hypothetical situations in the future 
and what you might do in that specific scenario. Examples include: 
 
What would you do if you were unsure about the goals or direction of a coding task? 
What would you do if your coworkers didn’t complete their part of a coding project on time? 
What would you do if your teammate asked you to review their code and it was full of bugs? 
   Education: You may be asked interview questions that are specific to your education, 
including if and where you went to college, if you’re self-taught and how you taught 
yourself, etc. 
 
   Technical knowledge: Technical interview questions that assess your real skills and 
knowledge is the heart of the tech interview. These can be tech-oriented trivia-type 
questions like: 
 
How can you make sure that your code is both safe and fast? 
When do you use polymorphism? 
Explain the difference between an array and a linked list. When would you choose one over 
the other? 
These could also be impromptu questions about the code you write on the whiteboard. 
That’s because what most companies want to know, more so than what facts you’ve 
memorized, is how well you can solve problems. 
 
Common computer science interview question topics 
As we’ve noted, there are not really any “common” technical interview questions when it 
comes to specifics. 
 
However, there are a few common themes and subjects of coding interview questions that 
frequently appear in technical interviews across different industries. 
 
Let’s look at some of these potential technology interview questions and challenges, 
broken down by topic. 
 
DATA STRUCTURES 
Coding interview questions in this category might include:  
 
Explain the differences between an array and a linked list. 
Implement a stack or a queue. 
Describe the characteristics of a binary tree. 
Discuss the advantages and disadvantages of different types of trees (e.g., AVL tree, B-
tree). 
ALGORITHMS 
Computer engineering interview questions often include algorithm challenges such as: 
 
Implement sorting algorithms (e.g., quicksort, mergesort). 
Explain the time complexity of common algorithms (e.g., binary search, sorting algorithms). 
Solve problems using depth-first search (DFS) and breadth-first search (BFS). 
DATABASES 
If you’re interviewing for a data-relevant role, your tech interview questions might come 
with whiteboard assignments like: 
 
Explain the differences between SQL and NoSQL databases. 
Write a SQL query to retrieve data from a database. 
Design a database schema for a specific scenario. 
SYSTEM DESIGN 
Computer science interview questions related to system design might include options like: 
 
Design a URL shortening service (or a similar scalable system). 
Explain the concept of load balancing. 
Discuss the trade-offs between monolithic and microservices architectures. 
NETWORKING 
IT technical interview questions will probably touch on network questions, e.g.: 
 
Explain the OSI model and the TCP/IP stack. 
Describe the differences between TCP and UDP. 
Solve problems related to network protocols and troubleshooting. 
PROBLEM-SOLVING 
Just about any type of tech interview will be looking at how you approach problems. 
Challenges in this category may include things like: 
 
Solve algorithmic problems under time constraints. 
Discuss your problem-solving approach for complex scenarios. 
Analyze and optimize code for efficiency. 
Want a more specific direction as you prepare to face your coding interview questions? 
One pro tip is that you can go to Glassdoor, look up the company you’re interviewing at, and 
take a look at what real people say they were asked during interviews at that company. 
 
For example, if you were interviewing at Zoom and wanted to know Zoom software engineer 
interview questions, you could look at the company’s Glassdoor page and see that the 
questions asked and topics covered include: 
 
General React questions  
Modifying small web apps that were partially implemented 
Implementing an LRU Cache in Java 
Trivia questions related to Spring boot and concurrent thashing 
And more 
Of course, these questions may not be the exact questions you’re asked in your interview, 
but they can give you an idea of what to expect. 
 
Meaningful questions to ask in technical interviews 
Interviews are a two-way street. You should be learning about the interviewer and the 
company, just as much as they’re learning about you! 
 
Asking thoughtful questions is also a good way to stand out in the interview. “The age-old 
adage ‘people don’t remember what you say, but they remember how you made them feel’ 
is so true when it comes to interviews,” says Refael (Pramp). “When a candidate keeps the 
flow going in a friendly conversation, instead of making me feel like I am conducting an 
interrogation, I will remember our brief time together fondly.” 
 
Of course, you should tailor your questions to the specific situation, but what are some 
examples of questions to ask in a technical interview (or even a traditional interview)? 
 
Here are a few meaningful questions you can ask: 
 
What do you like most about working here? 
What frameworks, tools, tech stack, etc. does your company use? 
Can you describe the development process here? 
How do you test your code? 
Does the company offer opportunities for professional development, training for engineers, 
etc.? 
What’s the most challenging project you’ve worked on here? 
Is there anything about my resume/application that gives you pause? (this can be a great 
way to get out ahead of something on your application that the interviewers think is a 
weakness/red flag) 
The other upside: while you’re listening to their answer, you get a little break from talking! 
 
   Back to top 
 
What to Expect When You’re Interviewing 
Let’s break down each stage of the typical technical interview process, with quick tech 
interview tips for how to pass a technical interview and stand out in each part. 
 
Phone Screen 
Congrats, you’ve already made it past one of the hardest stages: your tech resume caught 
the eye of the recruiter/company! The phone technical screen interview is your chance to 
make a good first impression. 
 
You can showcase your tech experience to a degree here, but some technical screening 
interviews over the phone will be less tech-focused than others. More importantly, focus on 
conveying your soft skills (enthusiasm, communication, teamwork, etc.). 
 
Man on video call 
DURING THE TECHNICAL PHONE INTERVIEW 
Here are a few more tips on how to prepare for a technical screening interview via 
phone/Zoom: 
 
Be excited about the company or project, and that positivity will come across in the 
interview. 
Know your audience. If you’re interviewing with a recruiter (with no programming 
knowledge), play up your soft skills and don’t get too technical. If you’re interviewing with a 
software developer, show off that tech knowledge! 
Be honest: tell the interviewer what most interests you in a job and what kinds of projects 
you’d like to work on. 
Answer behavioral questions by showing, not telling. Use specific, memorable details and 
tell a story. 
WHAT INTERVIEWERS ARE LOOKING FOR IN THE PHONE SCREEN 
Beyond just pure tech skills, which they’ve already read about on your resume, interviewers 
in a phone technical screen interview want to see: 
 
   Passion for tech/coding 
 
   Enthusiasm 
 
   Communication skills 
 
   Culture fit 
 
   Alignment with company mission/values 
 
HOW TO STAND OUT OVER THE PHONE 
Even if you’ve applied to hundreds of jobs, tailor your answers to the exact one you’re 
interviewing for. 
 
“When a candidate answers the interview questions in a way that is specific to the 
company and the position, it shows that they have done their research,” says Refael 
Zikavashvili, co-founder and CEO of Pramp. “It makes me believe them when they say they 
want the job. Not just any job, but THIS position that they are interviewing for.” 
 
Also, look for opportunities to show your value alignment. “When they make it clear that 
they support the big picture and the mission of the organization, it’s a great sign that they 
will be a good fit,” says Refael. 
 
   Back to top 
 
Remote Coding Challenge 
“The coding challenge is typically a lot less rigorous than the whiteboard,” says Chris Lee of 
Launch School. However, that doesn’t mean you can brush it off or apply less effort, as 
you’ll often be asked to justify your choices. 
 
This technical round has some flexibility in how companies handle it. So first, let’s go over 
some of the common types of remote programming interview questions or challenges. 
 
Some companies will give you a real-time monitored challenge to see how you code. Often 
this is done via a video interview + a web-based code editor like CoderPad, Collabedit, or 
even a Google Doc. 
Other companies (usually startups) may simply require you to complete an at-home 
assignment instead within a set time limit–usually 48 hours. 
Really small startups may not include a remote coding challenge at all–instead bringing you 
in for an onsite interview immediately after the phone interview–but bigger companies 
often do. (General rule: the bigger the company, the more structured the hiring process is.) 
Man working from home 
CODING INTERVIEW PREPARATION TIPS FOR THE REMOTE CODING CHALLENGE 
During a real-time coding challenge, communicate with your interviewer and think out 
loud. Make it a collaborative process (use “we” instead of “I”), since interviewers want to 
know that you’re a team player. 
 
And remember to slow down. These real-time challenges are not usually timed, so take 
your time, think it through, and give the interviewer a chance to give you hints. 
 
During a take-home coding assignment, take time to plan out your code before writing it 
out. Make sure you fully understand the instructions and requirements. Re-read them 
several times before starting and once more after you’re finished with the challenge to 
make sure you’ve ticked every box. 
 
   Check out this comprehensive article focused on acing the take-home challenge for 
other awesome tips. 
 
WHAT INTERVIEWERS ARE LOOKING FOR IN THE CODING CHALLENGE 
Coding skills 
Testing code as you write it 
Problem-solving skills 
Collaboration skills 
HOW TO STAND OUT IN A REMOTE CODING CHALLENGE 
One way to stand out in your remote coding challenge technical round is to go above and 
beyond. Sometimes remote coding challenges will come with optional “bonus” 
requirements. Complete those requirements to impress your interviewers. 
 
Don’t cheat or get help from others to make yourself look better. “During follow-up live 
interviews, it’s common for employers to probe the candidate to explain why certain 
choices were made,” says Chris (Launch School). “This is why it’s imperative that you don’t 
get help on the code challenge; if you do, you will be exposed during the follow-up 
conversation.” 
 
   Back to top 
 
Onsite Interview and Whiteboard Challenge 
Now we’ve arrived at the most intimidating part of the entire tech interview process. 
 
At tiny startups, onsite technical interviews might be a lot less formal than at bigger 
companies. Heck, there may not even be a whiteboard to do a coding exercise on! 
 
Still, whatever the company size, it never hurts to know how to prepare for a software 
engineering interview, so you’re ready for any situation that may arise in your tech interview. 
(More on how to prepare for technical interviews further down!) 
 
boardroom 
WHAT TO DO DURING THE ONSITE TECHNICAL INTERVIEW + WHITEBOARD CHALLENGE 
These steps will help you nail your technical interview—even if you don’t know all the 
answers! 
 
1. Ask clarifying questions before you even start writing code. 
 
You don’t have to stay in answer mode the whole time—it’s also smart to be thinking of the 
right questions to ask in a technical interview! And being presented with a technical 
challenge is a great time to practice this. 
 
Instead of starting to write out your code immediately, slow down. Even if you think you 
already know how to solve the problem or answer the question, ask clarifying questions. 
 
By doing this, you might get hints from the interviewer, plus you want to make sure you fully 
understand the challenge/question before diving in. 
 
“I appreciate it when someone takes the time to evaluate the question he faces in the tech 
interview,” says Refael (Pramp). “It shows me that this person is calculated and rather than 
just writing code, he sees the whole picture.” 
 
“Ask questions around [your initial] assumptions of the question, and try to reason about 
the question from a bottom-up perspective,” adds Chris. 
 
2. Talk through your code (think out loud) to give the interviewer a window into your 
thoughts. 
 
What happens in a technical interview is as much about the journey as the destination. 
 
“It’s designed to test a candidate’s communication and problem-solving skills,” says 
Refael. “More important than the solution is how they work at getting the solution. Can they 
articulate their thoughts while writing out the code on the whiteboard? Are they putting 
together a clear response to the question?” 
 
Certain types of programming interview questions aren’t even supposed to have easy 
answers, making them even more about the thought process. 
 
“Is it an algorithm design problem? If so, sometimes you’re not supposed to know the 
answer right away,” says Parker Phinney, founder of Interview Cake. 
 
“You’re supposed to have to try a couple ideas and think creatively and maybe even take 
some ideas your interviewer feeds you and run with them. Just relax and keep thinking out 
loud and trying new ideas.” 
 
Coding in person 
A helpful tip for explaining your thought process is to act like you’re part of the team. If this 
were a real-life situation, how would you discuss, explain, and solve the problem? 
 
This can also give your interviewers an idea of how you’d collaborate on the team if they 
were to hire you. 
 
3. Speak clearly and precisely. 
 
Being in a high-pressure situation like a programming interview might have you a little 
flustered, but work through it. Being as clear and specific as possible can help you keep 
yourself collected. 
 
“Since programmers work with abstract concepts, speaking clearly and precisely is 
paramount,” says Chris (Launch School). “Though it may not seem like it at first, the vast 
majority of programming roles are, at the core, social roles.” 
 
A few of Chris’s specific tips to help your tech interview skills: 
 
“Pay attention to vocabulary, even on seemingly simple concepts. 
Refer to a concept by its formal name. For example, instead of saying ‘it calls that function 
and the result is 5,’ say ‘the add_numbers function call returns 5, which is assigned to the 
variable sum.’ 
Avoid pronouns and ambiguous words like ‘result’ (usually, there is not a ‘result’ but some 
output, side effect, or return value). The second example demonstrates clarity of thought 
and precision of language, leaving the reader with an unambiguous account of what the 
code is doing.” 
Man in an interview 
4. If you’re stuck, stay calm, think out loud, and try new ideas 
 
Not sure of the answer to some coding interview questions? Start with what you do know. 
 
“Coding interviews are a lot like math exams in high school and university: often, you’ll get 
‘partial credit’ for showing your work and putting in some effort to find a solution,” says 
Refael (Pramp). 
 
“If you can demonstrate your thought process, the interviewer will understand that you’re 
doing your best to find a solution.” 
 
Honesty is key here, because good interviewers can spot when you’re bluffing. 
 
“Don’t panic or try to fib your way through it,” Refael continues. “Be honest that you don’t 
know, but explain where you would look to solve the issue if you faced it in your daily work.” 
 
If you’re really struggling to solve the problem, what can you do? 
 
Try breaking it down even further and solve a much simpler version. For example, you could 
write a very basic solution and optimize it later. 
 
The point is to get some code on the whiteboard and talk out loud as you’re figuring things 
out. In most cases, you’ll get points for trying and showing how your brain works. Plus, 
writing things out visually can often inspire a solution.  
 
How to pass a technical interview isn’t always about getting everything 100% right, but 
staying cool and rational under pressure will always help! 
 
5. Check for errors & walk through your solution at the end 
 
Companies want to hire software engineers who can write bug-free code, or at least know 
how to check for errors. 
 
Towards the end of writing out your solution, begin to check for any errors. This can show 
interviewers that you’re not just interested in writing code, but that you want to write good 
code. 
 
When you’re done with your code, walk through your solution so interviewers understand 
fully what you did and why you did it. 
 
Review your code 
WHAT INTERVIEW SKILLS EMPLOYERS LOOK FOR IN THE ONSITE TECHNICAL INTERVIEW 
Coding skills 
Problem-solving ability 
Ability to think creatively 
Communication skills 
Analytical thinking skills 
Culture fit 
How you handle feedback 
Ability to solve problems in a structured and systematic way. “Along the way, interviewers 
will also expect candidates to demonstrate knowledge of performance and optimization 
tradeoffs between space and time complexity,” says Chris (Launch School). “This will 
require applying algorithms and data structures to the current problem.” 
Understanding of the bigger picture. “Candidates may be asked to zoom out of application 
code and think about how data may flow between systems and the larger infrastructure 
impact,” explains Chris. “The goal is not to see if the candidate knows a specific piece of 
knowledge, but if they understand how systems interact and consequences of 
infrastructure decisions.” 
HOW TO STAND OUT IN THE WHITEBOARD INTERVIEW 
Keep it simple and clear! 
 
“Designing efficient algorithms is sort of table stakes. Here’s something that really stands 
out: writing particularly easy-to-read code,” says Parker (Interview Cake). 
 
“And like 80% of that is just picking really great variable names. Don’t use shorthand names 
like ‘x’ and ‘y’ to try to move faster–you’ll just confuse yourself and your interviewer and 
you’ll look reckless. Take an extra second to pick a variable name that really makes it clear 
what the variable holds, what type it is, etc.” 
 
   Check out this article for 7 other ways to stand out during your coding interview.  
 
Front end skills checklist 
 
Download a free checklist that will walk you through all the skills you need to become a 
front-end developer. 
 
Enter your email address 
We use this field to detect spam bots. If you fill this in, you will be marked as a spammer. 
Don't worry. I'll never, ever spam you! 
   Back to top 
 
After the Technical Interview 
When the technical interview is over, take a breath: you made it through! 
 
There are a few things you can do to follow up, but for the most part, it’s just a waiting game 
now. 
 
TIPS FOR AFTER THE TECH INTERVIEW 
Keep some emotional distance from the process. “Expect to get rejected a lot, and it’s 
important to not view it as personal judgment,” advises Chris. 
Even if you don’t get the job, have the perspective that the interview was great practice for 
the future. If it was your first one, now you know what to expect from a technical interview! 
Glean insights from the experience and use them to propel yourself forward. 
group of people working 
HOW TO BE A MEMORABLE CANDIDATE 
    Send a short and sweet thank you email to the recruiter/hiring manager within 24 hours 
of the technical interview. Ask if there is anything else they need from you, or if there is 
anything about your interview that gave them pause so you can address it, if possible. 
 
   Make a note of everyone you speak to during the tech interview process and reach out 
to them with a quick note of thanks as well. You can send emails to them individually if you 
made more of a connection, or send a group email with a general note of thanks to 
everyone. It will definitely help the team remember you! 
 
   If you haven’t heard back after a week, send a brief follow-up email to the tech recruiter 
or your possible future manager, reiterating your interest in the role and asking about 
potential next steps. 
 
Now that we’ve gone over what happens in a technical interview, let’s backtrack a little and 
go over the very first step: how to prepare for a technical interview before you’re in the room 
where it happens! 
 
How does the technical interview work, what should you expect, and how can you prepare? 
CLICK TO TWEET 
 
   Back to top 
 
Coding Interview Preparation 
There’s a lot that goes into preparing for a programming interview. Technical interview 
preparation is more than thinking up clever answers to “what is your greatest weakness,” 
after all! 
 
Learning how to prepare for technical interview questions may require a bit of a time 
investment, but it’s well worth it. 
 
How to prepare for a technical interview 
Some elements of coding interview preparation should ideally start well before you even 
land the interview. Other technical interview preparation steps can be accomplished closer 
to the day itself. 
 
So, here are some of the most important coding interview preparation tips to master in the 
days, weeks, or months leading up to your job applications and interviews: 
 
1. Prepare a 30-second to 1-minute elevator pitch for the “tell me about yourself” question 
and examples/stories for other interview questions 
 
It’s important that you go prepared to talk about non-coding topics like your employment 
history, career goals, past projects, etc. 
 
The technical interview could just be one part of many if you’re at a company with a long 
interview process, and you’ll probably have to answer some version of this question when 
you meet new interviewers. It’s a great time to demonstrate soft skills and passion. 
 
It’s also a good idea to prepare some real-life examples and anecdotes/stories ahead of 
your interview. Doing this can help you prepare for pretty much any behavioral or 
situational interview question. 
 
This works because if you have some examples/stories ready to go, you can apply them to 
nearly any interview question — which is important because you can’t really prepare for 
every single software developer interview question you might come across.  
 
meeting with notes 
So, for example: 
 
You could think of an accomplishment you’re super proud of. That one example could be 
applied to questions like “Describe a time you went above and beyond at work” or “What’s 
your proudest accomplishment?” 
You could have an example of a time you made a mistake at work. That one example could 
be applied to questions like “Tell me about a time you made a mistake at work” or “Give me 
an example of a time you overcame a challenge” 
Other stories/examples to prepare include: 
 
When you worked as part of a team 
When you solved a difficult problem 
When you showed leadership 
What you’re passionate about and why 
Think about how to adapt your anecdotes to fit common software developer interview 
questions you might face. 
 
2. Before you go, study up on the most important CS fundamentals 
 
Don’t stress yourself out like you’re cramming for an exam and trying to learn everything–
but do dedicate extra preparation time to key technical interview skills. 
 
Parker (Interview Cake) advises narrowing your focus to two main areas: “Fill the gaps in 
your knowledge of data structures and algorithms. Run a lot of practice problems.” 
 
For software engineer interview prep or really anything computer-science related, start with 
these must-study topics: 
 
Data structures 
Big O Notation 
Trees 
Sorting and search algorithms 
Heaps 
Arrays 
Hash tables 
Dynamic programming 
Woman studying 
   Need a more guided study of these topics? Check out The Ultimate Data Structures & 
Algorithms Course for a deep dive into the most common topics that come up in technical 
interviews, with 100+ popular interview questions asked by Google, Microsoft, Amazon, 
and other big companies. 
 
   Another great resource for learning everything you need to know about algorithms and 
system design is Interview Camp. Their weekly live sessions and 60+ hours of self-paced 
content will help you conquer your coding interviews by learning real-life techniques. 
 
Of course, depending on the exact position you’re applying for, there might be other topics 
you think you should brush up on during your coding interview practice. How to prepare for 
software developer interviews is obviously different from how to prepare for data science 
interviews. 
 
3. Pick one programming language and know it really well 
 
Here’s one of the “do this before you land the technical interview” tips: specialize. You 
should know at least one programming language really well, preferably C++, Java, Ruby, 
Python, Go, or C. 
 
Companies usually let you choose the language you’re most comfortable with. But which 
language should you use? 
 
Go for the language you have the most practice with. Even if the company uses a different 
tech stack, choosing the language you know inside and out will often be the better option. 
 
   You can use my 10%-off AlgoExpert discount to get access to coding practice questions 
with written solutions in nine popular programming languages. Just use the code ltcwm 
when you check out. 
 
   Want to use Java in your interview? Check out Pass the Technical Interview with Java — a 
Codecademy course designed to help you nail the technical interview in this specific 
language. They also have a technical interview prep course for JavaScript lovers. 
 
woman using laptop 
Check out these LTCWM resources for places to go to brush up on your coding skills: 
 
100+ of The Best Places to Learn to Code For Free 
The Best Places to Learn Web Development Online 
Recommended Beginner Coding Resources and Tools 
4. Do regular coding challenges/smart practice 
 
During your coding interview preparation, it’s important to study the right way. 
 
Start early so you don’t have to cram. How early? It will depend on your level of experience, 
how many hours per day/week you can dedicate to studying, and how soon your interview 
is, but if possible, start preparing before you even have a tech interview scheduled. 4-8 
weeks is a good amount of time to aim for. 
 
According to this Redditor: “If you can dedicate 1 to 2 hours most nights, you can prepare 
for a FAANG coding interview in 2 weeks without being completely burned out. Another 2 
weeks and you can be prepared for the onsite with more coding, system design, and 
behavior interviews.” 
 
Aim to solve 2-3 coding interview practice questions per day. A great resource providing 
software developer interview questions is Interview Cake. My review of Interview Cake is 
definitely positive: not only do you get a ton of practice technical job interview questions, 
you learn the right way of thinking about them. 
 
man practicing on notebook 
Practice coding by hand on a whiteboard or piece of paper (without the help of a code 
editor). Consider imposing a deadline on yourself to get accustomed to working under time 
pressure. 
 
The more realistic a scenario you can create, the more effective your coding interview 
preparation will be. 
 
You can use my 20%-off Interview Cake discount to get the full course with comprehensive 
information and a ton of practice technical interview questions–or join the email list to get 
one coding interview question per week for free. Plus read my review of Interview Cake. 
 
5. Understand tech fundamentals 
 
In the majority of cases, technical interviewers aren’t going to grill you on obscure concepts 
or expect you to recite complex formulas from memory. 
 
“Most questions will not be based on gotcha-knowledge,” says Chris (Launch School). 
“Instead, the interview conversation will be probing your ability to deconstruct complex 
concepts and seeing if you can peel back the layers.” 
 
For example, he continues, “An interviewer may ask ‘If you had a page that’s experiencing 
performance issues, how would you go about figuring out the bottleneck?’ This open-
ended question is simultaneously assessing a candidate’s knowledge of fundamentals, 
and at the same time allowing the candidate to show off their depth of understanding. It’s 
these open-ended questions where interviewers can [identify] those who can work at a 
deeper engineering level. The only way to stand out is to understand the fundamental 
concepts that underpin the feature in question.” 
 
Woman learning on computer 
6. Come to the interview with a relevant project to talk about 
 
“A lot of people will advise job hunters to build a project and showcase that during the 
interview,” says Chris. “This is a great tactic because it allows the candidate to flip the 
conversation from being grilled to showcasing their ability.” 
 
However, just like you should tailor your cover letter to the company you apply to, you 
should think about a highly relevant project to feature during your software engineer 
interview prep. 
 
“A good general rule would be to build projects that, at minimum, match the complexity of 
work for the job you’re applying,” advises Chris. “Prospective employers will then be able to 
see that you not only can but actually have done work at the level that they require.” 
 
Don’t have a relevant project? Start building one the second you’ve sent out your job 
application! Or start contributing to open source projects. 
 
Join the free portfolio course 
 
Sign up below for my *free* course on how to build a portfolio site as a web 
developer/designer. 
 
Enter your email address 
We use this field to detect spam bots. If you fill this in, you will be marked as a spammer. 
Don't worry. I'll never, ever spam you! 
“Smart candidates should target specific roles,” Chris continues. “Study the requirements 
of the role and the type of projects the role is expected to work on. Then map out a way to 
independently produce projects of approximately equal complexity. You’ll stand out if you 
bring that type of project to the interview.” 
 
   Check out this LTCWM podcast episode with Parker (Interview Cake) for more tips on 
how to come up with coding projects to build and talk about in interviews. 
 
Looking at mockups 
7. Learn to manage your time effectively 
 
The more focused and efficient you can be during your tech interview preparation, the 
better you’ll do when you’re actually in the hot seat. Set a timer when practicing. Aim to 
finish a problem in about 30-45 minutes (including debugging at the end). 
 
If you run into snags, think of ways you’d explain your hesitation and potential next-step 
ideas to the interviewer. 
 
Here are some more time management strategies that can help during your tech interview 
prep. 
 
apple watch 
8. Do mock coding interviews 
 
Having a technical interview cheat sheet, reading books like “Cracking the Coding 
Interview,” (from Amazon) and doing online coding challenges on sites like Interview Cake 
are all amazing, but if you want to take it even further, live coding interview preparation 
might be what you need to really get comfortable and polished. 
 
“Pramp.com is an excellent place for getting realistic coding interview practice–and it’s 
free!” says CEO Refael. “While solving coding problems can help you improve your 
technical abilities, mock interviews with peers can also enhance your soft skills: the way 
you communicate, your body language, etc.” 
 
man using laptop 
Ultimately, interviewing is a skill, and your interview skills are sharpened with practice. 
Knowing how to prepare for coding interviews comes with time! 
 
“Practice, practice, practice,” says Chris (Launch School). “Your 20th interview will be 
dramatically different from your 1st, so try to get to the 20th in a practice setting and your 
first ‘real’ interview will actually be your 21st.” 
 
   With AlgoExpert, you can schedule a mock coding interview with an actual human 
being. 
 
9. Get a study buddy or find a coding mentor 
 
Got a friend or peer with similar job goals? Recruit them to help! 
 
Study coding concepts and work through problems together. Take turns interviewing one 
another so you understand the perspective of the interviewer as well. You’ll be learning 
how to answer technical interview questions while you learn how to ask them, too! 
 
Friends in cafe 
10. Have a process you can rely on to deconstruct questions 
 
Technical interviews can get tough–you’re probably not going to be thrown softball 
questions the whole time. “In a good interview, you will always be made to feel 
uncomfortable and be given a problem that you can’t just solve right away,” says Chris 
(Launch School). 
 
However, by anticipating this and forming a system to “deconstruct” questions, navigating 
the hard ones becomes a lot easier. “If you don’t have a process, it’s not going to be 
possible to figure one out on the fly,” Chris explains. “Think about how to do this before the 
interview. For example, one that I recommend to people is PEDAC.” 
 
man problem solving 
11. Never turn down an opportunity to interview 
 
This circles back around to the idea of practice! Even if a company isn’t your dream place 
to work, if they invite you for the tech interview stage, go. 
 
“Don’t turn down an opportunity to interview–the more coding interviews you complete, 
the stronger a candidate you’ll become,” says Refael (Pramp).  
 
Looking at paperwork 
After all, best case scenario: you get a job. Worst case scenario: you’re one step closer to 
knowing how to ace a technical interview! 
 
Doing this gives you more experience preparing for technical interviews and more feedback 
on your performance afterward. 
 
12. Take a little time to reflect on impostor syndrome. 
 
If you catch yourself feeling like you don’t belong at a technical interview or you’re not truly 
qualified for the job…you’re not alone! 
 
“Impostor syndrome affects the vast majority of us, especially during interviews,” says 
Parker (Interview Cake). “Most of us really underestimate ourselves!” 
 
That’s where reflection time comes in. As Parker continues: “With a bit of effort, it’s 
possible to really shift your mindset from ‘I’m an impostor’ to ‘We all have our strengths and 
our weak points. I’m pretty good at some stuff, and I’m excited to learn more about some 
other stuff.'” 
 
woman listening to interviewer 
In the end, preparing for a programming interview often comes down to practice. 
 
Sign up for Interview Cake for tons of other resources to help you sharpen your skills for the 
technical interview. (And get a special 20% Interview Cake discount using my link!) 
 
13. Use ChatGPT to create a personalized study cheat sheet! 
 
There are tons of AI prompts you can use to help you prepare for an upcoming technical 
interview. Check out these 10 prompts to get started. 
 
Here are a few example prompts from that tweet: 
 
I’m interviewing for [Your Role] at [Company Name]. I have [Your Experience] in [Your 
Domain]. What are the technical aspects that need to be covered for the technical 
interview? Give me a list in order. 
Please provide a set of potential questions, expected responses, and relevant insights for a 
[Your Role] preparing for an interview in a [Company] that specializes in [Company 
Domain]. 
You could also give it a question and how you would answer it, then ask ChatGPT to rate 
your response with a 1-5 rating and give tips on how to improve your answer. 
 
laptop and notepad on desk 
AI can also help in other ways! For instance, Liftoff is an AI-powered interview prep platform 
that helps you practice your tech interview skills. It acts like a real mock video interview 
with a very life-like AI person interviewing you. 
 
Common Technical Interview Mistakes to Avoid 
Knowing what not to do can be just as important as knowing what to do, so let’s quickly 
cover a few common technical interview mistakes. 
 
1. Not preparing enough 
 
Seriously, there’s no such thing as too much coding interview preparation. 
 
“The good news is, most candidates don’t put in that time. So it doesn’t take much to really 
pull ahead of the pack,” says Parker (Interview Cake). “It’s such a bummer as an interviewer 
to watch a candidate really come up short and just think to yourself, ‘I can tell you’re smart–
if you had just reviewed some of this stuff I’m sure you’d be able to get this.’” 
 
2. Jumping into the code without taking a moment to think it through 
 
You might be eager to start solving the problem, but take a few minutes to question your 
assumptions and make a game plan first! 
 
“Starting too quickly gets a lot of people into trouble when they could have taken a moment 
to prevent confusion down the road,” says Refael (Pramp). “Some of the most common 
mistakes candidates make are avoidable. Pause for a moment to think through the 
problem-solving process.” 
 
3. Being too arrogant or opinionated 
 
People would rather work with a humble person than an arrogant know-it-all. Especially for 
those with fewer years of experience, “it’s more important to come across as being 
malleable and eager to learn, so the employer can envision you in a variety of projects and 
roles,” says Chris of Launch School. “Even seemingly innocent statements like ‘I love X and 
don’t like Y’ may come across as ‘I’m limited in my ability to work in a certain way.'” 
 
By considering your “soft” interview skills and choosing your words carefully, you can avoid 
these misunderstandings. As Chris advises, “A candidate should be tempered in their 
preference. For example: ‘I’ve been enjoying X lately, but also have experience with Y.'” 
 
Professional woman chatting 
4. Not making conversation/chit-chat 
 
Remember, your interviewers are human! It can be extremely valuable to find a point of 
connection. 
 
“An interview is not just about answering questions correctly, but also about a 
conversation,” says Chris. “Ask good questions. Laugh and make jokes at appropriate 
junctures. At the end of the interview, even if you missed a few questions, the overall feeling 
the interviewer has about you should be positive. If you know that you are not a great 
conversationalist, make sure to focus on improving this.” 

---
 
 
 
 
 
 
 
 
 
 
 
 
What is a computer science cover letter? 
A computer science cover letter is a document you submit with your application for a 
position relevant to a computer science background. It usually details the most important 
parts of your resume including experiences and skills, and provides additional information 
to fill in details of your background. Your computer science cover letter will usually address 
why you want the job you are applying for, why you'll be a good fit for the job and how your 
background prepares you to succeed if hired. This letter is a good opportunity to 
demonstrate your writing and communication abilities and showcase your 
professionalism. 
Related: How To Write a Good Computer Science Resume (With Template and Example) 
How to write a computer science cover letter 
If you are writing your own computer science cover letter, here are some steps that might 
help: 
1. Review the listing 
Before writing your computer science cover letter, review the listing you're applying for. 
Some employers use software that filters application materials before a hiring manager 
reviews them, so be sure to identify and include role-specific keywords. You'll want to tailor 
your cover letter to the position and company you are applying for, so try to review the 
company's values and mission statement as well. 
2. Brainstorm ideas 
Next, brainstorm ideas to include in your cover letter. Be sure to include topics that can 
incorporate the keywords you identified when reviewing the listing. Try to focus on your 
strengths as well as experiences that will help you become an asset in your new role. 
3. Organize your thoughts 
After you've brainstormed the ideas you want to include in your cover letter, look for 
patterns that might help you organize them. For instance, you might notice that you've 
brainstormed experience, skills and personal qualities. Think about what order will be most 
effective for presenting them. For instance, you might want to include your most 
compelling details first in case a busy hiring manager is skimming cover letters, or last to 
make a final impression on your reader. Consider using an outline or map to diagram your 
ideas before writing your rough draft. 
4. Write a rough draft 
Using your outline or map, turn your ideas into complete sentences to develop a rough 
draft of your computer science cover letter. Add transitional words and phrases to clarify 
the relationships between your ideas. Be sure each paragraph leads logically into the next, 
and try to include evidence for your main points—for example, an instance when a 
particular skill helped you achieve a goal. 
5. Seek feedback 
After writing a draft of your cover letter, consider allowing a trusted colleague or mentor to 
review your writing and make suggestions. You might pose specific questions to them to 
help guide their feedback; for instance, you might wonder if your examples connect clearly 
enough to each main idea. You might also be able to leverage cover letter review help 
through your alma mater, if they provide career services to alumni. You might also choose 
to set your cover letter aside for a time and then perform a self-review your writing. 
6. Revise and edit 
Finally, revise and edit your cover letter based on the feedback you received or your own 
self-review. Be sure it includes just the right amount of detail, explaining your ideas while 
omitting less relevant information. Check for any errors in grammar, usage and mechanics. 
Cleanly edited conventions can help show that you pay attention to detail and that you care 
about professional communication. 
Computer science cover letter template 
To further support you in writing a computer science cover letter, here's a template you can 
use: 
To Whom It May Concern, 
Upon reading the listing for a [job title] role with [company name], I knew I [express interest 
in the role.] Your mission of [describe specific company values and how they match your 
own.] Between my education and work experience, I'm positive I'll be a strong addition to 
the team. 
[Description of your significant experience in the field.] I've worked extensively with the 
technologies included in the listing, such as [specific technologies here.] I also 
demonstrate [other important skills and abilities, and the result of applying those skills]. 
I am eager to apply these skills to support [company name] in the listed [job title] role, and 
I'd be thrilled to discuss my qualifications more in person. I have also attached my full 
resume detailing my experience and achievements for your review. 
Thank you for your time, and I look forward to your reply. 
Sincerely, 
John Smith 

---
It’s hard to go wrong with a technology degree. According to the National Association of 
Colleges and Employers, computer and information sciences is the major with the highest 
job offers and job acceptance rates, particularly with advanced degrees—nearing $100,000 
for starting salaries. 
1 
 Perhaps that’s why a recent CareerBuilder study revealed that the number of science and 
technology jobs is expected to grow twice as fast as other occupations. 
2 
 
As of May 2021, the Bureau of Labor Statistics reports that a degree in a computer-related 
field can lead to a variety of well-paying and high-demand jobs, with a median annual wage 
of $97,430. The best tech jobs pay significantly more than the average median wage of 
$45,760 and have projected growth rates of 13%, faster than the overall rate for all 
occupations. 
3 
 
By sorting through data from several sources, including the U.S. Bureau of Labor Statistics 
(BLS), we compiled the following list of the ten best tech jobs. 
 
KEY TAKEAWAYS 
Technology remains a hot sector for the job market heading into the 2030s. 
STEM majors are at an advantage when applying for jobs in software development, 
engineering, IT, or research. 
Here, we look at some of the best tech jobs through 2030, according to U.S. government 
statistics. 
1. Data Scientist 
Job outlook through 2030: 2.4% 
Number of new jobs through 2030: Not available 
Median annual wage: $108,660 
4 
The Harvard Business Review (HBR) calls data scientists “the sexiest job of the 21st 
century." 
5 
 There is a high demand for individuals who can evaluate data to help companies make 
business decisions; however, there is a relatively low supply of qualified candidates. 
 
Take the Next Step to Invest 
Advertiser Disclosure 
 
 
 
According to a 2021 Burtch Works report, salaries for level three data scientist managers 
are as high as $250,000. Burtch Works also notes that most data scientists have either a 
Master’s degree or a Ph.D. in mathematics/statistics, computer science, or engineering. 
6 
 
2. Software Developer 
Job outlook through 2030: 22% 
Number of new jobs through 2030: 409,500 
Median annual wage: $110,140 
Software developers are in great demand. This growth is fueled by the demand for mobile 
apps and other products that are driven by technology. While some software developers 
design applications, systems software developers design operating systems and 
interfaces. A bachelor’s degree in computer science, software engineering, or 
mathematics is usually a requirement. 
7 
 
3. Information Security Analyst  
Job outlook through 2030: 33% 
Number of new jobs through 2030: 47,100 
Median annual wage: $102,600 
8 
By far, the largest number of job openings on the list is for information security analysts. 
More than 22 billion records were breached in 2021, according to Risk Based 
Security/Flashpoint, an international security company. 
9 
 These breaches illustrate the urgent need for information security analysts. A bachelor’s 
degree in computer science or programming is the typical requirement, although some 
employers prefer an MBA in information systems. 
 
4. Computer Systems Analyst 
Job outlook through 2030: 7% 
Number of new jobs through 2030: 42,800 
Median annual wage: $99,270 
Computer systems analysts are needed to design and install new computer systems, and 
IT consulting firms hire most of them. Growth has occurred primarily in the following areas: 
cloud computing, mobile technology, and healthcare records. Candidates usually need a 
bachelor’s degree in a computer-related field, although the Bureau of Labor Statistics 
reports that sometimes a liberal arts degree is sufficient. 
10 
 
5. Web Developer 
Job outlook through 2030: 13% 
Number of new jobs through 2030: 25,500 
Median annual wage: $77,200 
This is one of the few jobs on the list that you can get without a bachelor’s degree. There are 
three types of web developers; web designers, who create the layout and feel of the 
website, need an associate degree in web design. 
 
Webmasters, who maintain the website, may have a webmaster certificate, an associate 
degree in web development, or a bachelor’s degree, depending on the employer. Web 
architects, who handle the technical construction of the site, usually need a bachelor’s 
degree in programming or computer science. 
11 
 
667,000 
The number of new jobs in computer and information sciences fields that will be added 
over the next decade, according to BLS. 
3 
 
6. Sales Engineer  
Job outlook through 2030: 8% 
Number of new jobs through 2030: 5,000 total (specific numbers for technology not 
available) 
Median annual wage: $103,710 
12 
The demand for sales engineers in other industries is only projected to increase by 8%; 
however, as per a 2021 global market report, the growth rate is nearly three times as fast for 
professionals selling computer software and hardware. 
13 
 Most sales engineers have a degree in business, science, or a technology field. They must 
also be well-versed in technology to present proposals, explain products, and answer 
questions. 
 
7. Information Technology Manager  
Job outlook through 2030: 11% 
Number of new jobs through 2030: 52,700 
Median annual wage: $159,010 
Information technology managers go by a variety of other names; for example, computer 
and information systems managers, chief information officers (CIOs), chief technology 
officers (CTOs), IT directors, or IT security managers. While duties may vary, they usually 
oversee an IT team and handle the organization's technology needs. A bachelor’s degree in 
a computer or information science-related major is required, though some employers 
prefer an MBA. 
14 
 
8. Computer Research Scientist 
Job outlook through 2030: 22% 
Number of new jobs through 2030: 7,200 
Median annual wage: $131,490 
15 
This position has the least number of new jobs, but that’s because it is a difficult field to 
enter. Computer and Information Research Scientists typically require a Ph.D., and so the 
candidate pool is small, which keeps the demand for this role high. Among other duties, 
computer and information research scientists write algorithms to help businesses analyze 
data. 
 
9. Network and Systems Administrator 
Job outlook through 2030: 5% 
Number of new jobs through 2030: 18,800 
Median annual wage: $80,600 
This job has the lowest growth rate on the list, but don’t let that fool you. Companies need 
network and computer systems administrators to handle their day-to-day technology 
operations, which include installing and maintaining local and wide area networks, 
intranets, etc. 
16 
 
Typically, candidates for this role hold a degree in information science, computer science, 
computer engineering, or electrical engineering. 
 
10. Computer Support Specialists  
Job outlook through 2030: 9% 
Number of new jobs through 2030: 72,200 
Median annual wage: $57,910 
It’s the lowest paying job on the list, but it also requires the least amount of time in school; 
most employers will hire candidates with a postsecondary certificate or an associate 
degree. There are two types of computer support specialists: computer network support 
specialists and computer user support specialists. 
 
Computer network support specialists usually work with IT staff to troubleshoot problems. 
Computer user support specialists, also known as help desk techs, assist customers and 
non-technical employees. 
17 
 
What Are the Highest Paying Tech Jobs? 
The highest-paid tech jobs are IT Managers and computer research scientists. The median 
annual wage for these roles is well over $100,000 per year. 
 
Which Tech Jobs Don't Require a Degree? 
Although it is often difficult to get your resume seen without a bachelor's, there are several 
jobs in technology that do not require a four-year degree. Web developers, software 
developers, and computer support specialists are notable examples. Although many 
companies prefer their developers to have a four-year degree, having a large portfolio of 
coding work or other certifications may help get your foot in the door. 
 
How Do You Find Tech Jobs? 
Like other careers, you can find tech jobs through company websites, job boards, LinkedIn, 
and old-fashioned networking. Since tech jobs require specialized skills, you can also find 
jobs through a recruiter. 
 
The Bottom Line 
Technology is one of the fastest-growing and most in-demand industries. Use this list as a 
guide to evaluating the job outlook, salary, and education requirements for your dream 
tech job. 

---
Interview Formats 
What, exactly, is a software or technical interview? Depending on the field and the position, 
these interviews may require you to 
 
Create a PowerPoint presentation on a tech topic 
Write code in real-time and/or do an on-the-spot coding test 
Compete a technical problem in a group and present to a panel 
Work out a tech problem on a whiteboard in front of a group 
How to Prepare 
LOCK IN THE FUNDAMENTALS 
In addition to more traditional behavioral questions, a technical interview will cover your 
knowledge of computer science. Depending on the job , this could be coding, data 
structures, algorithms, systems design, big O notation, etc. Refer to your coursework to 
refresh your memory on the basics. 
 
FAMILIARIZE YOURSELF WITH THE FORMAT AND TYPES OF QUESTIONS 
First, if the recruiter has sent you material on preparing for the interview, be sure to review it 
closely. Also, check to see if the company has interview prep information on its website. If 
you are not sure of the format, ask the recruiter. 
 
Questions will focus on the types of skills you’ll be using on the job. They can range from 
the core fundamentals to higher-level principles. 
 
Many technical questions are based on your own experience. Did you create a game for a 
class project and put it on your resume? Be ready to talk about your technical tasks, 
challenges, and contributions. 
 
Although some companies are entirely removing them from their interview process, you 
might receive a brainteaser during technical interviews. These questions assess your 
problem-solving abilities, comfort with ambiguity, and quantitative skills. Share your 
thought process and problem-solving approach out loud, and try to enjoy the challenge. 
 
HOW TO PRACTICE 
Most interviewers want to hear you explain your thought process while working through a 
problem. This gives them insight into your personality, problem-solving skills, and ability to 
work under pressure. There are many ways you can practice doing this: 
 
Ask a friend with a technical background to act as your mock interviewer. Practicing and 
explaining out loud is a great way to prepare and build confidence. 
Get involved in competitive programming and hackathons and make open-source 
contributions. 
Be prepared to thoroughly explain any technical projects listed on your resume. 
Interview Tips 
DON’T DWELL ON MISTAKES 
Be comfortable asking questions and asking for clarification. If you make a mistake, don’t 
let it aﬀect the rest of the interview. You’ll have the opportunity to answer many questions 
and the interviewer will often forgive a single mistake. When something goes wrong, move 
on and focus on the rest of the interview. If you don’t know the answer to a particular 
question, just be honest about it. Try to engage the interviewer so you can learn more about 
the topic and/or explain where you could find the answer. 
 
USE THE INTERVIEW TO SHOW YOUR PASSION FOR TECH 
By demonstrating your passion for coding and creating new programs, you are also showing 
why you are the right candidate for the position. Related extracurricular activities are a 
great way to show this passion. “The number one thing I look at on resumes is extra-
curricular activities,” says former Google engineer Paul Tyma in a blog post. He adds, “I 
want to hire engineers that I want to work with. And those engineers are passionate about 
cool algorithms, slick code, and new ideas. They do that stuﬀ in their spare time—it’s not 
just a job, it’s what they do because they love it.” 
 
BE PREPARED FOR A LENGTHY INTERVIEW PROCESS 
The tech interview process may take several weeks and involve multiple interviews. 
(Recruiters will often clarify this process in advance.) After the initial phone screening, you 
might meet with engineers and managers in the days or weeks to come. 
 
DON’T FORGET TO PREPARE FOR TRADITIONAL/BEHAVIORAL QUESTIONS 
Employers often say that students are so concerned about the technical interview that they 
haven’t thought through answers to common questions like “Tell me about yourself?” or 
“Why are you interested in this job?” Read through our tips on common interview questions 
and practice behavioral questions with a CCE career counselor. 

---
Nailing the Technical Interview 
 
 
  
 
What makes a technical interview different from a normal job interview? It is a specialized 
and challenging process that will test your coding skills, personality, and problem-solving 
abilities. However, if you prepare well ahead of time, then you can ace the interview and 
make the process much less intimidating. Keep in mind that each company’s interview 
process looks different, but the information below will provide an outline. 
 
Typical phases of the technical interview:  
 
The (sometimes technical) phone screen OR coding assessment: The purpose of this round 
is for the company to determine if you are qualified for the role and are a good fit for their 
company. Most questions in this stage are behavioral, but sometimes questions arise that 
will ask about proficiency in a certain programming language, etc. Sometimes, an 
asynchronous coding assessment will be the first part of an interview, however. 
Remote coding challenge/interview: If the first round was not a phone screen, then 
companies will often want to test your coding abilities before having you come for an in-
person interview. This might be conducted over video-chatting platforms such as Zoom or 
a homework-type assignment for you to complete by a certain deadline. With the job 
search process becoming more automated, some employers are turning to virtual 
interviewing entirely and this might be the last round. 
Onsite interview and whiteboarding challenge: This is the final stage and typically involves 
an in-person coding challenge (s) for you to perform in front of the interviewers (usually 
your potential boss/colleagues). If you make it this far, then this means the company is 
strongly considering hiring you, depending on your performance in this round. 
Who will be doing most of the interviewing? This greatly depends on the size of the 
company. If you are interviewing at a startup or smaller organization, then it will likely be a 
member (s) of the engineering team or even the CTO. If your interview is with a large 
company, then there will likely be multiple types of individuals involved. For example, you 
might have more of a behavioral interview with a member of HR but have the whiteboarding 
portion with a senior software engineer. It is always a good idea to look up the names of the 
interviewers on LinkedIn beforehand if you have them. 
 
What to wear: Even though tech is a relaxed industry, it is still important to dress 
professionally for interviews. A general rule of thumb is to dress one “level” above the 
company’s dress code. For example, if “casual” is allowed by the company, then you 
should opt for a business casual look. To find the company dress code, search their social 
media pages and see what their employees wear. 
 
What to bring with you (IF in person):  
 
Notepad/padfolio 
Pen 
Printed copies of your resume 
Questions for your interviewers (on topics such as the company culture, trajectory of 
company technology, company challenges, and successes. etc.). Examples of questions 
can include: 
What can a student do in the next semester/year to prepare for success at [company]? 
What’s the most rewarding part of your job? 
Why did you choose [company], and why do you stay? 
Technical Interviewing Guide and Resources:  
 
 
 
Technical Interviewing Guide 
 
Technical Virtual Interviewing Tips: 
 
With the pandemic, virtual interviews have been growing to be more common, and even the 
norm for some companies. Interviewing in an online setting can feel intimidating, but here 
are some tips to help you ace your virtual interview! 
 
Know your virtual interviewing tools. If the company you are interviewing for is using Zoom, 
make sure you are familiar with Zoom and how to turn your camera on, connect your audio 
input and output sources, etc. This can also help you check how you look on the camera 
and make sure you have good lighting beforehand! 
This also includes certain live collaboration programming tools. Many interviewers may ask 
you to code in a platform that does not have autocomplete, so make sure you are familiar 
with the syntax of the language you plan to use. 
If you’re living with others, let them know that you are having a virtual interview that day and 
ask for quiet hours during that part of your day. 
Keep water nearby! You may be talking a lot and the good thing about virtual interviews is 
you can easily have a glass of water by your side. After talking a lot in an interview, it can 
help to pace yourself with a few sips of water. 
Be ready to share your screen. Some interviewers may ask you to share your screen, so 
make sure you are familiar with how to share the correct screen. 
Have your resume pulled up in front of you as a reference for your behavioral questions and 
specific questions about your experiences to help you guide your answers! 
 
 
After the interview:  
 
Send a thank-you email to the recruiting/hiring manager within 24 hours after your final 
stage of the interview. Make sure to mention a couple of things that were unique to your 
interviewing experience, or what you enjoyed the most about the process. 
If you have not heard back within 2 weeks, you can send an email to the recruiter/hiring 
manager to see about the next steps (if any) and to reiterate your interest in the role. 
General tips:  
 
Pick one or two programming languages and know them very well: This is incredibly 
important, as companies usually let you select which language to use in your technical 
interview when solving problem sets. 
Come prepared to discuss projects/experiences that are relevant to the role and company: 
Employers want to hear you showcase your work and articulate your skills. If you do this, 
then they can envision how you’d fit into the role within the company. 
Do some research about the company’s interview process beforehand: Websites such as 
Glassdoor can offer insight into company culture and provide real-life examples of 
technical interviews. Keep in mind that this data is self-reported, so there will likely be 
potential bias, however. 
Practice!: Websites like Pramp allow you to practice technical interviewing for free. Take 
advantage of resources like this. 

---
The Ultimate Guide to Finding a Job in Tech 
Introduction 
I have been actively mentoring developers, both new and experienced, for just over half a 
year. One of the main concerns between all engineers usually revolves around finding a job. 
 
If you are already employed, chances are getting there was an exhausting process. 
Sometimes it can feel daunting to even start to think about having to go through all of that 
again. 
 
This process is even more intimidating if you are looking for your first job, an internship or 
looking for a career change. 
 
Where do you start? What do you need to prepare? Is there anything I could do better? 
 
In writing this article I am looking to create an extensive guide that eases people through 
the journey. 
 Step One - Preparation 
This stage is all about laying the groundwork that you will use for your applications. These 
are the typical things that people think about and know they should have, but perhaps don't 
quite know how to enhance to increase their chances. 
 
 CV/Resume 
Everyone needs a good CV/Resume. 
 
As someone who reads a lot of them, I have come to understand the importance of fine-
tuning them to be eye-catching and concise. You would not believe the amount of CV's that 
are 5 pages long, with size 8 font. I can guarantee you, I'm probably not going to read past 
the first page. 
 
Without a doubt, one of the hardest parts (but most important) of this is a personal 
statement. It should reflect your personality and your relevance to the role. The aim is to 
speak highly of yourself without sounding like you are blowing your own trumpet... for 
example, I would write: 
 
"I am an experienced engineer and people manager with over five years of working in a 
team lead/managerial position. Not following a traditional route into the tech space has 
given me an unparalleled empathy for coaching people of all ability level and backgrounds. 
Outside of work I actively mentor new developers, teaching them how to get started and 
progress in the world of engineering, a cause I feel extremely passionate about." 
 
The rest of the CV is dedicated to detailing all the relevant experience you have, whether it 
real-world paid experience, or things you have done online. 
 
If you haven't worked as a developer before, open-source work can be a really positive thing 
to put here. 
 
On a side note, jobs that you have had in the past ARE relevant, even if they aren't in 
technology. Communication, teamwork, customer service... ALL RELEVANT. 
 
DO 
Keep it brief - no more than two pages. Preferably one page. 
Keep readability in mind. A size 10/11 font will be fine. If you find it doesn't fit on the page, 
you have written too much. 
Find ways to make your experiences relevant... Have you worked in a team, interacted with 
customers? 
Edit it depending on the job you are applying for. Make it personal. How do you fit in with the 
culture? etc 
 DON'T 
Be generic and sound like a robot. You want to stand out amidst other applicants. 
Waffle. Keep it straight and to the point. 
Reference online tutorials or courses. It likely doesn't mean a lot to the reader and is 
wasted space. 
Covering Letter 
Cover letters are equally as hard as a personal statement but are SUPER important. 
 
If you go through a recruiter (we will discuss that later), more often than not they will not 
allow a cover letter, however, if you are applying direct you should ALWAYS ALWAYS 
ALWAYS write one. Even if it says it is optional. 
 
I again like to write this depending on the job you are applying for. I have a master cover 
letter template and then edit it when I understand more about the company I am 
approaching. 
 
Here is an example, I wrote this in the context of applying to a job role similar to the one I 
am in now: 
 
"I am sending my resume in response to the open position for ... 
 
My background in managing teams consists of four years working as a Product Manager for 
a ventilation company, looking after a team of twenty ducting engineers before realising a 
dream and moving into software. I since progressed to a lead developer position, however 
always missed the role of coaching and helping individuals grow personally. 
 
Due to this, I started mentoring budding developers in 2018 and jumped at the opportunity 
to become Team Manager at my current workplace, a leading Data Science consultancy 
offering R, Python and JavaScript services. Here I played an integral part in positioning the 
engineering resource for a strategic change into being a more product-focused company. 
 
Most recently, I have worked closely with Talent and Development to define an engineering 
career framework, allowing developers to have a clearer insight into the characteristics and 
skills the company deems important, enabling career growth. 
 
I am always keen to seek new challenges, and it would be an honour to work for a company 
who are actively offering such a ground-breaking service, hold culture and wellness of their 
employees in such high regard and to help its extremely talented engineers reach their 
potential." 
 
You can see that there is a personal touch to the letter. I have referenced what the company 
do in the last paragraph. 
 
Another tip I have is to reference a talk or a piece of work someone from the company has 
done. For instance "I am applying after watching an inspiring talk by ... which really 
showcased the companies values. I would love to be a part of that". 
 
 DO 
Keep it brief - no more than half a page. 
Keep readability in mind. A size 10/11 font will be fine. If you find it doesn't fit on the page, 
you have written too much. 
Add a personal touch, showcasing that you have some interest in the company outside of 
just chasing a role. 
Edit it depending on the job you are applying for. Make it personal. How do you fit in with the 
culture? etc. 
Create a benefit that the company will be getting if they take you on. My benefit is that I 
actively practice coaching outside of my full-time role and I can bring that to a company. 
 DON'T 
Be generic and sound like a robot. You want to stand out amidst other applicants. 
Waffle. Keep it straight and to the point. 
Talk about yourself in an arrogant way. There is a fine line between showcasing what you 
can do and boasting. 
 Portfolio 
This is a controversial topic that gives people a lot of trouble. 
 
People I have spoken to have put off applying for jobs because they weren't happy with 
their portfolio. 
 
Newsflash: I am STILL not happy with my portfolio. I got my current role with absolutely NO 
portfolio. If I had waited until I was happy, I would still be waiting! 
 
I am a true believer that you should do something simple, and do it well. Just flicking 
through Twitter and looking at some of the most well-known developers, a lot of them have 
VERY simple websites with some articles. 
 
I think as a new developer, you are not necessarily going to possess all of the design skills 
that a designer will have. Therefore, although it is great fun to build something and be 
ambitious with your projects, I think for job apps you should stick to something really really 
simple. 
 
An ambitious website that has a massive amount of projects, articles, pictures opens up 
the ground for things to go wrong. Is whoever viewing your website going to be doing it on a 
phone? Are they going to be on a 27" Mac... If something goes wrong or looks off, they will 
likely notice it and remember it. 
 
I know I had an applicant recently whose portfolio still had some placeholder text from 
where he had obviously used a template and not filled that field... There is nothing wrong 
with using a template, but I remembered his portfolio for the WRONG REASONS. 
 
There is no shortage of tools to get a good website up and running if you are that way 
inclined (Gatsby starters anyone?). 
 
So just your name, a brief paragraph about what you do, and some links to social accounts 
(GitHub, LinkedIn, Twitter etc) will be fine. 
 
Articles are also a really good thing (more on that later too). 
 
DO 
Keep it simple - Unless you are confident you can pull it off. 
Link to relevant social accounts. 
Make it responsive. You don't know what screen sizes it will be viewed on. 
Keep it accessible. 
Google Lighthouse test it just to make sure of the above. 
If you WANT to showcase a project, then one fully complete project is miles better than five 
half-baked projects. Keep that in mind. 
DONT 
Be too ambitious.. it doesn't matter! 
 Social Media - Online Presence 
Most people have some sort of online presence. Whether it be 
Twitter/Instagram/Youtube/Facebook. 
 
These are both good and (potentially) bad. Let me explain. 
 
 The Benefit 
It can showcase your character and your passion for technology and development. 
 
It can help you interact with other similar-minded people (Networking). 
 
It gives you a creative platform to showcase your talents. 
 
The Negative 
It can showcase your character. 
 
It can help you interact with other similar-minded people and start arguments. 
 
It gives you a platform to be an idiot. 
 
In all seriousness though, don't put anything on Social Media that you wouldn't want an 
employer to see. I know for a fact I will Google a candidates name. If they have 50k 
followers on Instagram and are using the platform to spread a positive message within the 
community it is such a positive thing. If they are on Twitter and are starting flame wars then 
I have to question is this the sort of person I want in my team? Probably not. 
 
One thing I always recommend to people is to document their process. Whether it be 
discussing the latest course you are doing and what you are finding hard about it, or 
whether you are documenting the build of a particularly ambitious project, people are 
going to want to hear about it and you will be surprised at the number of people it helps. 
 
This all works in your favour when you come to apply for a job, as well as helping you 
improve your communication skills and grow your presence in the industry. 
 
 Open Source 
I will shout about the benefit of Open Source projects until the end of time. 
 
Why is it so good? 
 
Because it gives you REAL WORLD experience, without having to sell your services on a 
freelance basis. 
 
The number one complaint I find with new developers is they find it hard to get real-world 
experience, and even junior jobs require it. 
 
THIS IS THE ANSWER 
 
Sure, it is intimidating, because you may mess up... But this is one of the most valuable 
lessons in your journey to developerhood (is that a word? It is now). 
 
Pull requests, branches, Merge Requests, forking - all super important concepts that you 
probably just aren't going to get that much practice with outside of a project that has lots of 
contributors. 
 
Even if it is doing something small, like writing a more concise piece of documentation, it is 
something you can talk about in an interview and experience you can put on your resume! 
 
How fucking cool would it be if you were applying for a job as a Front-End developer who 
will be working with React when you have actively worked on the React codebase? Fucking 
cool is the answer    
 
DO 
Choose a project you have an interest in. 
Check through the existing issue list. Even if it's just helping answer a question someone 
might have, its all good experience. 
Interact with the other contributors. Many projects have their own Discord or Spectrum 
communities. 
Adhere to good code and Git practices. This is your chance to put it into practice. 
Shout about your new real-world experience from the rooftops. 
 DON'T 
Rush the process. Take time and care in your approach. 
Bite off more than you can chew. 
 Step Two - Applying 
On first glance, this might seem fairly simple. Surely you just fire up Indeed.com and go 
through the list? 
 
That's certainly one way of doing it, but I think of it like this. Everyone will be doing the 
same. The competition will be more fierce. 
 
There are other ways of finding jobs! 
 
 Good Places to Look You Might Not Have Thought Of 
LinkedIn 
The job section on LinkedIn is actually really good, so sign up if you haven't already and fill 
in your profile. 
 
You will also quickly notice that there are A LOT of recruiters working on LinkedIn. They will 
swoop on you like a vulture to a corpse. 
 
Find the more trusted recruiters to work with. Having someone fighting your corner and 
pushing you through the process can actually be a really positive thing. I always tell people 
recruiters are trying to earn their commission, and they do so when they have gotten you in 
the door and working there. They also have access to jobs that you wouldn't have seen 
anywhere else. 
 
Glassdoor 
Glassdoor is primarily a website that allows people to rate the companies they work for. 
However, they can also rate the interviews they have had at a company. 
 
If the company you are applying for is established, this can be an absolute gold mine of 
information. 
 
Software engineers will have written about the process so you know exactly what to expect 
from an interview which gives you valuable time to prepare yourself. 
 
Glassdoor also has a job section which is really good and has a wealth of different jobs for 
you to check out. It has the added benefit of showing you whether the company is good to 
work for and what their values/culture are. 
 
Google 
Good old-fashioned Google. 
 
One technique I have for finding work is Googling local agencies and companies to me. 
Compile a list of ten companies in your area and their websites and if they have a job 
section then apply. 
 
Even if they don't have a job section, it would be worth sending them an email and a CV 
regardless. Just introduce yourself. Especially small agencies may not need someone there 
now, but they never know when their junior developer might leave and having someone's 
CV from the local area will be a big help to them. 
 
Of course, this doesn't have to be done locally. Even big companies will have a job section, 
and often these jobs aren't listed on traditional job search websites. 
 
Compile a list of ten companies you admire, and I am sure you will find at least 4/5 
companies that are after someone with the same skillsets as yourself. 
 
Which Jobs to Apply For 
Sometimes it could seem as though companies are after a superhero! 
 
A junior dev with experience in React, Node, Kubernetes, AWS, Docker, Svelte, Go, Java, 
Python. Bollocks to that! 
 
You have to remember that a lot of these job specs are written by HR teams and not 
development teams. 
 
For sure, someone has asked me before "what is a perfect candidate" and before you know 
it you have listed off a list of all these technologies.. but as we all know, that's not realistic. 
 
Apply for these jobs anyways! As long as you have good knowledge of at least a few of the 
things in their technology stacks, that will likely be more than enough and there is always 
the option of training and upskilling! 
 
 Organising Your Search 
Job hunting can quickly get out of hand. 
 
All the job apps look the same, you don't know what you have applied for, and before you 
know it you have got yourself in a mess! 
 
I have a system for job hunting! 
 
I use Notion, because it allows you to create columns and link directly to a webpage 
however whatever productivity app you have will be just as good no doubt. 
 
I spend a day or two solely looking for opportunities, linking to all of the positions I like the 
look of. 
 
When I have applied to them, I move them into the "Applied" column. If I hear back and it's 
a negative, I move it into the rejection column. I also have a column for jobs that have 
decided to take things further. 
 
Organising your search can make you much more productive and will let you avoid mishaps 
like applying to the same job twice! 
 
DO 
Apply to jobs even if they don't seem a perfect fit. 
Keep looking continuously. You never know when the perfect role might appear. 
Reach out to your network, as it might throw up some offers. 
Make a list of jobs you have applied for, so you don't apply twice. 
Be upfront with recruiters about your needs/wants. 
DON'T 
Apply to anything and everything. At least make sure you have some experience in their 
tech stack. 
Just stick to looking on one website. You will miss out on a tonne of opportunities. 
Step Three - Interviews 
The dreaded interview! Everyone is scared of this stage, and it can be fairly brutal, however, 
it is important to give yourself the best chance of success. 
 
Importantly, you must remember that not being accepted is not necessarily a reflection on 
your ability. Interviews are to be taken as learning experiences, and you have to get good at 
them by practising. 
 
Research and Prep 
As I mentioned above, Glassdoor is a really good place to find a lot of information about the 
interview process of a company. 
 
If the company is not well established, or not large in size, that might not pull up any 
answers, however. 
 
Looking around online for any content revolving around the senior members of the 
company, or any employee-generated content is really important. Many companies will 
speak openly about their culture/values and gaining context is a really good thing, even if it 
doesn't shed any light on the technicalities of an interview. 
 
It has also become more common for companies to store their code tests on GitHub. 
Whilst I certainly don't recommend cheating, it can be good to practice what a real-life 
code test is like before you come down to doing the real thing. Below is the code test for 
Just Eat: 
 
https://github.com/justeat/JustEat.RecruitmentTest 
 
There are other tests out there so practice away! 
 
 On the Day 
What To Wear 
Wear something in keeping with the context of the company. If you know they wear formal 
clothing, go in something formal. However, even formal clothes should be comfortable. I 
remember wearing a new suit to an interview once and I was constantly thinking about how 
much it was scratching my neck and therefore didn't perform to my best. 
 
If they wear informal clothes, then wear something comfortable whilst still looking 
presentable. I like to wear a jumper, black jeans and smart trainers. 
 
I heard a comment once that you should wear no more than 2 colours, and ever since then, 
I have always worn black to an interview. I don't know why but I would worry if I didn't have 
black on now! Whilst I'm not saying that's the right thing to do, you should certainly give at 
least some thought to what you want to wear so you can pick something that makes you 
feel at ease! 
 
Ask Questions, Even if You Know the Answers 
You should ALWAYS ask questions, so make sure you prepare some beforehand. If 
something is discussed in depth that you were going to ask then obviously don't mention it. 
 
Asking questions shows you have a genuine interest in the company, which is always a 
positive thing. 
 
Be Polite, Smile  
It goes without saying, but someone has invited you into their company, and you want them 
to hire you. The least you can do is show them respect and some manners. 
 
Where I work now, they have an agreement with the reception of the building we rent our 
office space to provide their feedback on the candidate. If they are rude you will fail the 
interview automatically, regardless of your ability. 
 
Good manners cost nothing! 
 
Be Passionate 
I have always said that I would take someone who was passionate and less skilled than 
someone who had no passion for the industry but was really knowledgable. 
 
As a team manager, you are looking for individuals who are passionate about their craft, 
who will continuously strive to achieve more. Outright knowledge is not the be-all and end-
all. 
 
Don't Try and Haggle 
There is something really off-putting about people who mention salary and terms of work 
within an interview. You should at least have some idea that this role is a good fit for your 
needs before you go for an interview, and this is not the time to bring it up unless prompted. 
 
My experience is that this should be left until an offer has been established. If the company 
want you, you leave yourself more leverage to ask for a slightly higher salary or an extra day 
of remote working. Don't cut your nose off to spite your face, as some would say! 
 
 DO 
Do your research... again! 
Think of some questions you want to ask beforehand. 
Wear something you feel comfortable in. 
Arrive promptly - about 10/15 minutes before the interview is scheduled. 
Ask for some water if you need it. 
Try and make eye contact. It can be hard, but creating a connection with someone is made 
easier with eye contact. 
Treat everyone with respect, not just the interviewer. 
 DON'T 
Come across arrogant or unopen to change. 
Go off-topic when answering questions, even if they require a long answer. 
 Conclusion 
I hope this has been helpful to at least some of you  If there is anything you would like me to 
add to this article, I will certainly do so. My intention is to keep adding to it over time, so all 
suggestions will be greatly received! 

---
Nearly every employee in every company in every industry relies on computer technology in 
some way. In everyday life, we also depend on digital resources for important (and 
mundane) tasks, from checking our bank balance while on a morning walk to ordering 
lunch at a kiosk. 
 
With all of this advancing technology comes a greater need for professionals who can keep 
servers, systems, and software working. If you’re one of the many people interested in this 
growing field, you might be wondering, “Which computer science career is right for me?” 
It’s a big question because there’s so much to choose from. Once you have an idea of 
which areas interest you most, you can prepare for that career with the best computer 
science degree that fits your needs. 
 
Let’s take a look at some of the career options. 
 
An In-demand Field 
Before we get into specific types of jobs and roles, we should first reiterate how in demand 
this exciting field is. According to the U.S. Department of Labor’s Bureau of Labor Statistics 
(BLS), the need for computer and information technology (IT) occupations is estimated to 
grow by 13 percent in the next decade. This is faster than the average growth rate of all 
occupations, which is about seven percent. Further, many of the BLS-defined computer 
science-related occupations are also expected to grow “faster” or “much faster” than the 
average career, which means you’re likely to find promising career prospects. 
 
Dr. S. R. Subramanya, a computer science professor at National University, has been in the 
field for long enough to see the industry evolve. Today, he says the increased focus on 
cloud computing, mobile devices, and cyberthreats have contributed to this growth. This 
evolution has also created new opportunities. 
 
“User interface design, user experience design, mobile application development — these 
positions didn’t exist 10 years ago, and now they are highly sought after,” he says. “Security 
has also become a really important issue in the field, so there’s a real need for 
cybersecurity analysts.” 
 
The BLS backs that statement up: One of the fastest growing areas within computer 
technology positions involves security. 
 
Which Computer Science Career Is Right for Me, Though? 
Before you can decide which computer science degree program to enter, you’ll first need to 
decide where you see yourself working and what you see yourself doing. Do you prefer to 
work alone or with people? Do you want to build programs or keep them running? Do you 
want to analyze data or protect it? As you can tell, you have many options so the best way 
to answer this question is to take a look at popular degree programs and what they may 
lead to. In doing so, you’ll also learn how to study computer science in an intentional way 
based on your career goals. 
 
It’s OK if you don’t know exactly where you see yourself; that’s often part of the learning 
process. In fact, Subramanya says, “A lot of people don’t know what they want to do.” But 
as you discover the different career options you’ll start to get a better idea of how to 
proceed. 
 
While the courses in computer science will prepare you for your career area of choice, 
Subramanya says there are some traits that may be helpful for computer science majors. 
On his list are maturity, math proficiency, problem-solving skills, and critical-thinking skills. 
 
He also suggests, if you aren’t sure what area of computer science you’d like to get into, to 
participate in local programming competitions or ‘hack-a-thons,’ or even join local clubs 
that will expose you to the technology and people in the field. 
 
“People can check out these events and try out their competencies, he says. “There are 
many avenues to find out what interests you.” 
 
One other way to answer “which computer science degree is right for me?” may be to 
consider which industries you’d like to be part of or in what type of environment you’d like 
to work. From there you could figure out what the most needed technology positions in 
those fields are. Nearly every industry relies on computer science professionals; for 
example, healthcare, retail, manufacturing, education, banking, insurance, travel, 
hospitality, marketing firms, and, of course, the software industry itself. 
 
Let’s take a look at some of the types of careers you can aim for with a computer science 
degree in hand. 
 
What You Can Do with a Computer Science Degree 
What started as a sub-discipline within mathematics is know a booming area on its own. 
“Computer science has changed so drastically over the years, especially in the past five 
years,” explains Subramanya. He continued that in the early days of computer science as 
an academic discipline, it was mostly about programming. Today, though, it really revolves 
around the user experience. 
 
A major in computer science is a well-rounded option which will prepare students for 
software development and design positions as well as roles in networking, says 
Subramanya. He also says a solid background in math is helpful. 
 
In the next section, we’ll explore some computer science careers in more detail, including: 
 
Software developer. 
Computer network architect. 
System administrator. 
Database administrator. 
Computer and information systems manager. 
Computer and information systems analyst. 
Information security analyst. 
These are some common names of occupations within the field. However, you’re likely to 
see many different kinds of titles and job descriptions available in the workplace from 
mobile app developer to VP of information technology. 
 
Get to Work 
If you’re interested in designing and developing computer programs that help companies 
carry out their work or help people manage their lives, a general computer science degree 
is a worthy choice. You’ll cover areas like operating systems, programming, 
communication, and even topics like ethics and global policy. Graduates of a computer 
science program have many options, and software developer is one of the most popular. 
 
“Many of our students end up at traditional software companies like Google, Microsoft, or 
Oracle,” says Subramanya. With so many types of programs and apps being developed to 
solve problems or for entertainment, software development is also a great area of 
computer science for creative types. Instead of working for a large traditional company, you 
may be more inclined to work at a smaller start-up software company, or Saas company, 
which typically have more of a niche solution for businesses and consumer segments. 
 
Software developers are one of the fastest-growing occupations according to the BLS; the 
field is expected to grow by 24 percent in the next decade. The national average salary for a 
software developer is $103,560. 
 
Another well-paying position for computer science graduates is a computer network 
architect. This position involves designing and building communication networks in a 
variety of settings, from large offices to a system that lives in the cloud. The BLS says the 
average national salary is $104,650 for network architects. 
 
What You Can Do with an Information Systems Degree 
This type of degree, Subramanya says, is not as math-focused. An information systems 
program prepares graduates for a system administrator role, among many other options. 
The BLS states the national average salary for system administrators is $81,100. 
 
“Information systems doesn’t involve software development; it’s about managing big 
software for a corporation,” says Subramanya. This could be at the company level, such as 
managing the in-house systems, or on the customer-end, working on the programs that 
allow companies to communicate with users. 
 
Data is a big part of how companies make decisions, but someone has to manage that 
information. A database administrator is another position an information systems degree 
could lead to. According to the BLS, this field is expected to grow 11 percent through 2016, 
which is faster than the average occupation; the national average salary is $87,020. 
Database administrators can find work in a variety of places, but companies and 
organizations with especially large amounts of data — such as universities, hospitals, or 
insurance firms — may have the most opportunities. 
 
What You Can Do With an Information Technology Management Degree 
Information technology, commonly called IT, has become the heart of organizations of all 
sizes. In an IT management degree program, you’d prepare to help companies figure out 
their technology needs and then implement and manage those plans. Coursework here 
would include database administration, systems analysis, and quality assurance. This type 
of program also focuses on project management as well as providing support to users. 
 
One career option for graduates of this type of an IT management degree program is 
computer and information systems manager. In this position, you help plan and direct 
computer-related tasks within a company or organization. This field, according to the BLS, 
has a national average salary of $139,220 per year and is expected to grow faster than the 
average career, at 12 percent between now and 2026. 
 
Another occupation related to this field is a computer and information systems analyst. 
According to the BLS, the national average annual salary for this type of position is $95,510. 
It’s not just a well-paying career, but it’s also one on the rise. The BLS says demand is 
estimated to grow 28 percent through 2026, making it one of the fastest-growing areas of IT, 
as well as any occupation in general. 
 
What You Can Do With a Cybersecurity Degree 
As Subramanya pointed out, the rise of cyberthreats has resulted in a specialized field of 
computer science. But, as “the internet of things” becomes commonplace, smart devices 
—  like appliances, lightbulbs, clothing, and other items that you can control with an app 
and wi-fi access — also bring a level of risk. 
 
“Everything connected to the internet has a security vulnerability,” he says, adding that 
today there are many more aspects of security to think about than there used to be. For 
example, he explains how cryptography, or the act of data encryption, was once the big 
focus of protecting and communicating sensitive information. 
 
This means companies of all sizes need to consider the safety of data, which, for example, 
often includes personal customer information. When hacks happen, thousands of people 
worry about their data being compromised or falling into the wrong hands. This has led to a 
greater need than ever for companies to build trust with consumers and, as a result, the 
sharp rise in the demand for skilled workers in information security. 
 
Information security analysts, a career option related to cybersecurity, help protect, 
secure, and manage a company’s networks and systems. This could include creating 
protective measures for testing systems for vulnerabilities. This sector of computer science 
is booming, too. The BLS estimates the field will grow 28 percent over the next decade, 
which is much faster than the average occupation. The national average annual salary is 
$95,510. 
 
How to Study Computer Science 
If you’re wondering how to study computer science, you’ll be happy to know you have many 
options for not just types of degrees, but also for when and where you can earn them. For 
example, National University offers a Bachelor of Computer Science and several master’s 
programs in computer science-related fields — and all of them are available online. 
 
“We have many, many students in our online programs,” says Subramanya. “Students 
might be restricted by distance or time.”  The online option allows students with even the 
busiest of professional or personal schedules to access the educational training they need 
to enter or advance in computer-related careers. 
 
The online learning platform does seem particularly fitting for students interested in 
working with computers. Subramanya says National’s web-based courses include 
instructor lectures, chats, discussions, and other easy-to-access assignments and 
materials. 
 
“Our learning management system provides very easy ways to submit homework and 
graded assignments,” he says. “And students can have seamless communication with the 
faculty.” 
 
Can You Get an Online Master’s in Computer Science? 
The computer science careers we discussed so far usually require a minimum of a  
bachelor’s degree to get started, however earning an online master’s in computer science 
may allow you to start out in a higher position right away, help you advance more quickly, 
or, in general, give you an edge in the application process in a highly competitive field. 
 
As information technology departments and divisions grow at companies and 
organizations, the need for people to lead and manage these areas is also rising. This 
means that IT experts with experience in the field can move up in their positions, and 
furthering your education can give you a leg up on advancement. Graduate-level computer 
science programs often go beyond technical topics; for example, courses covering 
leadership and strategic planning can give you valuable skills to manage others. Aside from 
moving into leadership, earning an online master’s in computer science or a related field is 
a perfect way to expand your knowledge and skills in a specific area. Finally, for the 
entrepreneurial-minded computer science student, a master’s degree provides a broader 
understanding of the industry; this background will be helpful in launching a new company 
or product. 
 
Finally, you may be familiar with the terms CEO (chief executive officer), COO (chief 
operations officer), and CFO (chief financial officer). The growing importance of technology 
has led to newer C-suite positions like CTO (chief technology officer) or CIO (chief 
information officer). Plenty of work experience, and often a master’s degree, can lead to 
these upper-level positions. 
 
Tying it All Together: So Which Computer Science Career IS Right for Me? 
Now that you’ve explored some career opportunities, you might be closer to choosing the 
answer to “Which computer science career is right for me?” 
 
Some things to consider as you figure out how to study computer science in a way that will 
prepare you for your desired career are of course the demand, earning potential, and 
availability of jobs near where you’d like to live. On the more personal side, though, you can 
look for the computer science options that best fit your interests and skills. For example, if 
you can see yourself creating solutions or coming up with ideas for programs, those 
creativity and problem-solving characteristics are ideal for software developers. If you 
enjoy the idea of keeping companies (and people) safe, working in cybersecurity may be for 
you. If communication and keeping people and systems connected appeals to you, 
computer networking could be a good fit; and if you love data, your analytical skills may 
lead you to working with database or information management. 
 
As Subramanya explained, the field is constantly evolving which means jobs are too. 
What’s next? Subramanya says computer science programs will also come to prepare 
people to work with “autonomous cars, smart devices, machine learning, and quantum 
computing.” 

---
At Handshake, we know about the excitement that comes with landing a job or internship 
offer. But what happens when you end up trying to decide between more than one? If you’re 
lucky enough to find yourself in this position, having more than one offer in-hand has its 
benefits—but it can still be tough to decide between multiple job offers. Ahead, check out 
some tips for how to choose. 
 
The perks of receiving more than one offer 
 
Dalvin Josias Sejour, who has development experience at Facebook, StitchFix, UPS, and 
more. 
 
One of the biggest upsides to juggling multiple job or internship offers is the additional 
leverage it can give you in conversations with a prospective employer. “You can use the 
other offers as leverage to do better at negotiating on your own terms,” says Dalvin Josias 
Sejour, a Montclair State University grad, entrepreneur, and software engineer with 
firsthand experience judging between multiple offers. 
 
Receiving multiple offers doesn’t happen to everyone, and definitely might not happen at 
the start of your career. Just ask Dalvin! “Getting the first internship can be the toughest 
thing in the world. It’s like a chicken and egg scenario, because you are trying to get 
experience through the internship, but need experience to secure the role,” he says. 
“Therefore, in trying to land my first internship, I was willing to join any company that would 
give me the time of day. Luckily for me, that company just so happened to be an awesome 
tech company by the name of Facebook. With Facebook on my resume, it made seeking 
other internships down the line a lot more interesting.” Soon after completing the 
internship, Dalvin found himself faced with several offers from companies who wanted to 
bring him on board. 
 
How to decide between job offers 
Ultimately, choosing a job or internship offer boils down to your preference. However, here 
are a few helpful tips that will help you weigh the pros and cons. 
 
Don’t make a rash decision. “Without seeing what’s out there,” Dalvin says, quickly 
accepting your first offer “can leave you at a disadvantage because you won’t know if you’re 
being paid at a competitive rate. You could end up being grossly underpaid, finding that 
only after hearing from your peers at other companies what they were getting paid.” When 
you receive an offer, politely inquire about what the employer’s desired timeline is for a 
final answer. Be sure to use your remaining time strategically to evaluate your options 
based on the following criteria. (Don’t be afraid to make some old-fashioned pro and con 
lists!) 
Think about what really matters to you. Sure, it might be tempting to automatically accept 
the highest salary—after all, student loans are no joke—but there are other factors that 
might play into which role will make you feel most fulfilled at work. What projects would 
you focus on in each role? Will you have opportunities for upward mobility and professional 
growth? Is the company located somewhere you’re interested in living? 
Consider which environments you thrive in. Are you more inclined toward a smaller 
environment versus a large, complex organization? Do you like the idea of a close-knit, 
collaborative team or a very focused position within a larger infrastructure? Do you want to 
work remotely or in a hybrid environment, or do you have your heart set on in-person work? 
All of these factors should be considered when you’re weighing your options! 
Take note of the benefits. When considering an offer, think about the full range of benefits 
you’re being offered, not simply the salary number. What does the paid vacation time look 
like? Does the company offer retirement matching or stock options? What caliber of 
healthcare, dental, and vision benefits might they extend? Are there additional perks, such 
as fitness memberships, tuition reimbursement, or a home office stipend? A 
comprehensive benefits package can quickly add up to create a lucrative offer, even if the 

---
A Guide to grinding Leetcode 
Resource 
Leetcode is famous for being a perfect platform for practicing coding problems and to 
master coding interviews, unlike others, it is not for competitive programming, this guide 
will help you to get started with Leetcode without losing hope too early. 
 
A Guide to grinding Leetcode 
 
Follow a list 
Biggest reason why people don't find DSA interesting is because they are unable to 
discover good problems which are easier to solve, simply solving popular questions with no 
track of questions will bore you very quick. Even worse, you might try solving a really hard 
problem and lose motivation when it wasn't that hard, you just had to get a grip on it. That's 
why it's absolutely necessary to follow a list of questions, that way you won't have issues 
discovering new questions. 
 
Solving problems in right order is very important, 
 
you might see question marked easy which isn't actually easy, the solution will be small, 
but sometimes, it isn't easy to come up with that solution if you haven't done simpler 
version of it, thus, it will be demotivating, 
 
Blind 75 Leetcode Questions 
 
This is an awesome list which is asked in interviews and is ordered by actual level of 
difficulty with prerequisites coming before harder questions, if you follow this, you'll feel 
interested, once you have done most of this, do problems in “similar questions" section 
below each problem till you master that category. 
 
Once you feel confident, you can use this, 
 
Leetcode Patterns 
 
and solve problems by category, this will help you master a data structure or some 
algorithm. 
 
don't get afraid by “hard" questions, there is no hard problem which can't be broken up, try 
to break it, you might not be able to solve it but you'll convert it to much shorter set of 
problems which can be solved with some practice. 
 
Thinking abstract and looking at bigger picture is very important, try to convert it to a 
standard problem. Leetcode is addictive if you improve gradually, try it. 
 
Avoid looking at solutions easily 
It's not bad to look at solutions, afterall, you can't know everything and learning is 
necessary, however, looking at solution just after few minutes of brainstorming is bad, you 
have to give your absolute best and try every possible "inefficient" solutions you could 
come up with. 
 
First phase is to figure out what Algorithm and data structure will be used, if you are able to 
determine what data structure will be used, you can check the Related Topics section to 
verify if your assumption was correct, and if after few minutes you can't figure it out, you 
should still check the data structure that will be used and then try to figure out how and 
where it will be used in given problem. 
 
If you are able to come up with a solution which works correctly, just isn't the best one, 
that's still a success, coming up with a brute force solution is a bare minimum in an 
interview. 
 
You can try improving the brute force solution by using some optimizations, that might not 
lead you to the optimal solution, but improving a solution is a great skill. After spending an 
hour, if you can't solve the problem, you should usnderstand that you just aren't well versed 
with the given algorithm and should try solving related problems with that data structure 
and understand how it works. 
 
You should avoid looking at solution, a solution you made yourself will help you much 
more, you should abandon the question and maybe revisit in future when you have some 
experience with that data strucure. That way you can also track if you made some progress 
with that technique and if you could solve a new problem given to you in an interview, 
 
Interview Questions don't come with hints 
One thing to remember is that Interview questions won't tell you what data structure will be 
used for the problem. That's something you can only master with practice, the patterns and 
requirements of problems determine what's going to be used. 
 
There is no substitute for practice, reading about algorithms will sure improve your range of 
thinking, but practice is what will help you master it. 
 
Be Consistent 
This goes without saying that practice needs consistency, simply overdoing once and 
abandoning for months will be destructive, it doesn't take much to take out some time 
everyday for Leetcode, as far as discovering questions is a concern, you can use Daily 
Challenges to keep the consistency and maybe also earn Leetcode coins which might buy 
you a Leetcode T-Shirt one day. 
 
Turn Demotivation into learning opportunity 
There will be times when you can't solve a problem despite all efforts, that's very common 
and bound to happen, but some question being too hard is not something that should 
demotivate you, every question is a learning opportunity, you can always learn it. 
Demotivation should be avoided and that's only possible if you have confidence in yourself 
and will to learn as much as you can. 
 
Participate in contests 
Eventhough Leetcode isn't a competitive programming platform, there are contests which 
allow you to try out brand neew problems and even compete with others. They have 
categories of 1 easy, 2 Medium and 1 Hard, and solving 3 is more than enough. Once you 
have enough confidence on your problem solving ability, these contests will help you gain 
interview experience as they don't have any hints and solutions aren't available during 
contest. This is pretty close to a real interview experience where time is limited. 
 
Keep Hustling 
Leetcode is an addiction and soon you'll fall in love with it, all you need to do is start, there 
is only one good time to start anything great, NOW, just do it and you'll sure be satisfied 
with your decision and be proud of yourself. That's all, It's never too early and never too 
late. 

---
Discover the diverse range of fields and industries that computer science training can 
prepare you for, including IT, healthcare, finance, and energy. Learn about the expected 
growth, key roles, and average salaries in these sectors. 
 
Key Insights 
Computer science encompasses the study of information systems, computation, 
automation, hardware and software design, machine learning algorithms, and data 
visualization. 
Fields employing computer science skills include IT, healthcare, finance, and energy, 
among others. 
In the IT sector, professionals such as Computer and Information Research Scientists, 
Computer Network Architects, and Information Security Analysts earn a median yearly 
wage of around $100,000, with an estimated industry job growth of 15% between 2021 and 
2031. 
Healthcare employs computer science professionals in roles like Health Information 
Technologists or Medical Registrars, earning an average annual salary of around $55,000, 
with a job growth rate of 17% between 2021 and 2031. 
In finance, Financial Analysts use computer science for tasks like algorithmic trading and 
risk management, earning an average annual salary of around $100,000, with projected job 
growth of 9% from 2021 through 2031. 
Energy sector Data Scientists earn an average yearly salary of around $100,000, with 
remarkable expected job growth of 36% between 2021 and 2031. 
An important aspect of receiving professional computer science training to set yourself up 
for a career change is learning what kinds of fields and industries that training will help you 
find work in. Each industry will have different requirements and expectations for 
prospective employees, and you should consider these expectations when you start your 
training. This is true for students who have an idea of what kind of work they want to do and 
for students who aren’t yet sure what path they want to take after learning computer 
science skills. Industries that use computer science include Information Technology, 
healthcare, finance, and energy. Read on to learn more about how computer science 
relates to these industries. 
 
What is Computer Science? 
Computer science is an immense field that encompasses the study of information 
systems, computation, and automation. Hardware and software design, machine learning 
algorithms, and data visualization fall under the computer science purview. 
 
On the theoretical side, computer science includes information theory, algorithms, and 
computational theory. The practical side of computer science covers hardware and 
software design and implementation. While data science has emerged as a discrete 
discipline in recent years, many computer science pros still consider it a subcategory of 
the larger computer science field.  
 
Read more about what computer science is and why you should learn it. 
 
What Can You Do with Computer Science Skills? 
Computer science classes cover a wide range of subjects, encompassing anything from 
web development and software engineering to data science. According to the U.S. Bureau 
of Labor Statistics (BLS), the Computer and Information Research Scientist job sector is 
projected to grow by 21% between 2021-2031, well above the average growth rate of five 
percent. Top positions for computer science professionals include Software Developers, IT 
Security Analysts, Data Scientists, and Product Managers. 
 
Areas of specialization for computer science professionals include programming 
languages like Java, the development and application of robotics, and the development of 
new systems, tools, and programming languages. 
 
full-stack-web 
Common Industries That Use Computer Science 
Computer science has become a foundational component of almost all industries, as 
computing technologies are used in nearly every aspect of modern life. Those who learn 
computer science skills can build careers in Information Technology, healthcare, finance, 
and energy, as well as other industries. Read on to learn more about these industries and 
career fields. 
 
Information Technology (IT) 
IT professionals use computer science concepts and tools to manage data, build and 
maintain computer systems, and create software applications. IT is an industry that 
includes many different job titles such as Computer and Information Research Scientists, 
Computer Network Architects, Computer Support Specialists, Computer Systems 
Analysts, Database Administrators and Architects, Information Security Analysts, and 
Network and Computer Systems Administrators. According to the U.S. Bureau of Labor 
Statistics (BLS), the median yearly wage for IT professionals is around $100,000, which is 
more than twice as much as the median annual wage for all occupations in the U.S. BLS 
also estimates that this industry will see job growth of 15% between 2021 and 2031. 
 
The daily responsibilities of an IT professional depend on the person’s specific role. 
Computer and Information Research Scientists solve complex problems and design 
innovative uses for computer technology in the fields of business, medicine, science, and 
more. Computer Network Architects build local area networks (LANs), Intranets, wide area 
networks (WANs), and other data communication networks. Information Security Analysts 
protect a business’s computer networks and systems by planning and carrying out security 
measures. Computer Systems Administrators maintain computer networks’ day-to-day 
operations. These are just some of the many careers you can find in IT. 
 
Healthcare 
Computer science plays a crucial role in healthcare, from electronic medical records to 
imaging technologies and medical research. IT specialists help to ensure a hospital’s 
computers and networks run smoothly, maintaining patient records, allowing doctors to 
make digital notes, and more. Data Scientists clean, sort, and manage data and draw 
insights from that data. This information not only helps hospitals, but surrounding 
communities as well. For example, hospital data can be used to help track community 
spread of an illness, allowing local healthcare departments to respond accordingly. 
 
Computer science also plays a role in the development of healthcare technology. 
Healthcare technology tackles challenges like creating robotic-powered prostheses, 
hearing aids, mobility devices, and more. These technological breakthroughs transform 
patients’ lives. Technological improvements also empower doctors and other medical 
professionals to detect medical issues earlier, more easily, and faster than ever before, 
allowing for preventive and proactive measures that save lives every day.  
 
One specific computer science role in the healthcare industry is that of a Health 
Information Technologist or Medical Registrar. These professionals analyze clinical data 
and make recommendations regarding computerized healthcare systems. According to 
BLS, the average annual salary for this position is around $55,000. It has an expected job 
growth of 17% from 2021 through 2031. Occupational Health and Safety Specialists or 
Technicians gather information and evaluate various work settings and protocols. They 
earn a yearly salary of around $75,000 on average. This job has a projected growth of 5%, 
which is in keeping with the national average. 
 
Finance 
Computer science is used extensively in finance for tasks such as algorithmic trading, risk 
management, and fraud detection. Financial institutions use computer algorithms to 
analyze market data, make investment decisions, and execute trades automatically. These 
algorithms can analyze vast amounts of data and execute trades at a speed that is 
impossible for human traders. They also develop risk models that can help them manage 
risks associated with investments and financial transactions. These models use advanced 
statistical and machine learning techniques to analyze data and identify potential risks. 
 
Finance industry professionals also use computer science to develop fraud detection 
systems that can help identify and prevent fraudulent transactions. These systems use 
machine learning algorithms to detect patterns of fraudulent activity and flag suspicious 
transactions. 
 
A Financial Analyst is a professional who analyzes financial information to help businesses 
and individuals make investment decisions. They gather and analyze financial data from 
various sources, such as financial statements, market trends, and economic indicators, to 
identify investment opportunities, evaluate the financial health of companies, and make 
recommendations on investments. Financial Analysts also develop financial models and 
forecasts, prepare reports, and present their findings to clients and stakeholders. They may 
specialize in a particular industry or type of investment, such as stocks, bonds, or real 
estate. Additionally, Financial Analysts may also be involved in risk management, 
developing investment strategies, and monitoring investment performance. BLS predicts a 
job growth of around 9% for Financial Analysts from 2021 through 2031. The average annual 
salary for this position is around $100,000. 
 
Energy 
Computer science is used in the energy sector to optimize power generation and 
distribution, as well as to develop new renewable energy technologies.  
 
Energy generation and distribution systems use advanced algorithms to optimize energy 
production and distribution to meet demand while minimizing costs and reducing 
environmental impact. Computer science is also used to develop and optimize renewable 
energy sources such as solar, wind, and hydroelectric power. These systems use advanced 
algorithms to predict weather patterns and optimize energy production. Smart grid systems 
can optimize energy consumption and reduce waste. These systems use sensors and 
smart meters to monitor energy usage and adjust consumption based on demand. 
 
Computer science is also used to develop carbon capture and storage systems that can 
capture carbon dioxide emissions from power plants and store them underground. These 
systems use advanced algorithms to optimize the capture and storage process. 
 
Data Scientists analyze large amounts of energy data to identify trends and patterns. 
Energy companies use data analytics to make informed decisions about energy 
production, distribution, and consumption. According to BLS, Data Scientists earn an 
average yearly salary of around $100,000. This position has an expected job growth of 36% 
between 2021 and 2031, which is more than six times the national average. 
 
Learn Computer Science Skills with Noble Desktop 
If you want comprehensive computer science training in an interactive environment, check 
out the Full Stack Web Development Certificate from Noble Desktop. If you are looking to 
become a Software Engineer, consider enrolling in Noble’s Software Engineering Certificate 
program. If you focus your computer science training on the subcategory of data science, 
Noble Desktop’s Data Science Certificate gives you the skills you need for an entry-level 
position. High school students preparing for the AP Computer Science exam can benefit 
from Noble’s live online computer science NextGen Bootcamps. 
 
Key Takeaways 
Computer science skills are used in IT, healthcare, finance, manufacturing, and energy 
professions. 
IT professionals maintain computer networks and systems critical to an organization’s 
operations. 
In healthcare, data analysis helps to track patient health, community health, and more. 
Data allows Financial Analysts to forecast economic outcomes, detect historical patterns 
and trends, and more. 
The energy sector is tied to computer science because technological improvements, 
automation, and detection systems help to further green energy technologies.  
You can receive comprehensive computer science training in person and online through 
Noble Desktop. 

---
